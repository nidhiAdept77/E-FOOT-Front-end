{"version":3,"sources":["../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../../src/useController.ts","../../src/logic/getInputValue.ts","../../src/controller.tsx","../node_modules/reactstrap/es/Form.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/reactstrap/es/Label.js"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Array","isArray","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","get","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","search","output","isString","startsWith","find","transformToNestObject","isErrorStateChanged","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","isMessage","validateAllFieldCriteria","types","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","validateField","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","skipValidation","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","copy","isWeb","File","getTime","Set","Map","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","parentNodeName","currentError","validateResolver","removeFieldEventListener","updateWatchedValue","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","assignWatchFields","combinedDefaultValues","watch","unregister","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","isNameInFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrRegisterOptions","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","prop","control","React.useMemo","FormContext","React.createContext","displayName","useFormContext","React.useContext","useController","rules","onFocus","methods","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","event","getInputValue","registerField","shouldUpdateValue","defineProperties","onBlur","onChange","meta","invalid","Controller","props","as","render","rest","componentProps","React.cloneElement","React.createElement","propTypes","children","PropTypes","node","inline","bool","tag","tagPropType","innerRef","oneOfType","func","string","className","cssModule","Form","_Component","_this","call","this","getRef","_assertThisInitialized","submit","_inheritsLoose","_proto","prototype","_this$props","Tag","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","Component","defaultProps","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","i","F","s","n","done","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","stringOrNumberProp","number","columnProps","shape","order","offset","hidden","check","for","xs","sm","md","lg","xl","widths","array","getColumnSizeClass","isXs","colWidth","colSize","Label","htmlFor","colClasses","columnProp","colClass","_classNames","colSizeInterfix"],"mappings":"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","file":"static/js/1.90446cd0.chunk.js","sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(shallowFieldsStateRef.current, name, { ...value });\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { useFormContext } from './useFormContext';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport * as React from 'react';\nimport isFunction from './utils/isFunction';\nimport skipValidation from './logic/skipValidation';\nimport getInputValue from './logic/getInputValue';\nimport set from './utils/set';\nimport {\n  FieldValues,\n  UseControllerOptions,\n  UseControllerMethods,\n} from './types';\n\nexport function useController<TFieldValues extends FieldValues = FieldValues>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  onFocus,\n}: UseControllerOptions<TFieldValues>): UseControllerMethods<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formState,\n    formStateRef: {\n      current: { isSubmitted, touched, errors },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!isFunction(ref.current.focus)) {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!name) {\n          return console.warn(\n            '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n          );\n        }\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperties(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            {\n              value: {\n                set(data) {\n                  setInputStateValue(data);\n                  valueRef.current = data;\n                },\n                get() {\n                  return valueRef.current;\n                },\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  return {\n    field: {\n      onChange,\n      onBlur,\n      name,\n      value,\n      ref,\n    },\n    meta: Object.defineProperties(\n      {\n        invalid: !!get(errors, name),\n      },\n      {\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touched, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport { useController } from './useController';\nimport { ControllerProps, FieldValues } from './types';\n\ntype NativeInputs = 'input' | 'select' | 'textarea';\n\nconst Controller = <\n  TAs extends React.ReactElement | React.ComponentType<any> | NativeInputs,\n  TFieldValues extends FieldValues = FieldValues\n>(\n  props: ControllerProps<TAs, TFieldValues>,\n) => {\n  const { rules, as, render, defaultValue, control, onFocus, ...rest } = props;\n  const { field, meta } = useController(props);\n\n  const componentProps = {\n    ...rest,\n    ...field,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, componentProps)\n      : React.createElement(as as NativeInputs, componentProps as any)\n    : render\n    ? render(field, meta)\n    : null;\n};\n\nexport { Controller };\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'form'\n};\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.submit = _this.submit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.submit = function submit() {\n    if (this.ref) {\n      this.ref.submit();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        inline = _this$props.inline,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"inline\", \"tag\", \"innerRef\"]);\n\n    var classes = mapToCssModules(classNames(className, inline ? 'form-inline' : false), cssModule);\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes\n    }));\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = propTypes;\nForm.defaultProps = defaultProps;\nexport default Form;","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from './utils';\nvar colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar columnProps = PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number, PropTypes.shape({\n  size: stringOrNumberProp,\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nvar propTypes = {\n  children: PropTypes.node,\n  hidden: PropTypes.bool,\n  check: PropTypes.bool,\n  size: PropTypes.string,\n  for: PropTypes.string,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  widths: PropTypes.array\n};\nvar defaultProps = {\n  tag: 'label',\n  widths: colWidths\n};\n\nvar getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : \"col-\" + colWidth;\n  } else if (colSize === 'auto') {\n    return isXs ? 'col-auto' : \"col-\" + colWidth + \"-auto\";\n  }\n\n  return isXs ? \"col-\" + colSize : \"col-\" + colWidth + \"-\" + colSize;\n};\n\nvar Label = function Label(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      hidden = props.hidden,\n      widths = props.widths,\n      Tag = props.tag,\n      check = props.check,\n      size = props.size,\n      htmlFor = props.for,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"hidden\", \"widths\", \"tag\", \"check\", \"size\", \"for\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var columnProp = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    var isXs = !i;\n    var colClass;\n\n    if (isObject(columnProp)) {\n      var _classNames;\n\n      var colSizeInterfix = isXs ? '-' : \"-\" + colWidth + \"-\";\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n      colClasses.push(mapToCssModules(classNames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames[\"order\" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames[\"offset\" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames))), cssModule);\n    } else {\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n      colClasses.push(colClass);\n    }\n  });\n  var classes = mapToCssModules(classNames(className, hidden ? 'sr-only' : false, check ? 'form-check-label' : false, size ? \"col-form-label-\" + size : false, colClasses, colClasses.length ? 'col-form-label' : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    htmlFor: htmlFor\n  }, attributes, {\n    className: classes\n  }));\n};\n\nLabel.propTypes = propTypes;\nLabel.defaultProps = defaultProps;\nexport default Label;"],"sourceRoot":""}