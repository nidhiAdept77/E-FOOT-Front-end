{"version":3,"sources":["views/components/Loader/index.js","@core/components/breadcrumbs/index.js","@core/components/input-password-toggle/index.js","views/Profile/components/Tabs.js","views/components/CountryDropdown/index.js","redux/actions/country/index.js","views/Profile/components/GeneralTabContent.js","views/Profile/components/PasswordTabContent.js","views/Profile/components/PsnTabContent.js","views/Profile/components/BankDetailsTabContent.js","views/Profile/components/UserPrefrences.js","views/Profile/index.js"],"names":["LoaderComponent","loading","className","color","style","display","margin","size","BreadCrumbs","props","breadCrumbTitle","breadCrumbParent","breadCrumbParent2","breadCrumbParent3","breadCrumbActive","tag","to","active","InputPasswordToggle","label","hideIcon","showIcon","visible","htmlFor","placeholder","iconSize","inputClassName","rest","useState","inputVisibility","setInputVisibility","for","classnames","type","id","addonType","onClick","renderIcon","defaultProps","Tabs","activeTab","toggleTab","Nav","pills","vertical","NavItem","NavLink","connect","state","country","getAllCountries","dispatch","SET_LOADER","payload","CountryQuery","gql","client","query","data","countries","success","SET_COUNTRY_DETAILS","removeCountryData","REMOVE_COUNTRY_DETAILS","countryOp","value","errors","register","control","setValue","useEffect","length","Loader","FormGroup","Label","isClearable","as","Select","name","defaultValue","find","c","countryName","isoCode","getDefaultValue","options","map","innerRef","required","classNamePrefix","theme","selectThemeColors","FormFeedback","message","auth","user","uploadProfilePhoto","updateUserProfile","showToastMessage","profileImage","avatar","setAvatar","genralTabSchema","yup","shape","userName","min","firstName","lastName","_","isEmpty","useForm","mode","resolver","yupResolver","defaultValues","birthDate","Date","parseInt","handleSubmit","onSubmit","console","log","result","resultType","error","Media","left","object","src","alt","height","width","body","Button","Ripple","Input","onChange","e","reader","FileReader","files","target","onload","setTimeout","location","reload","readAsDataURL","hidden","accept","Form","Row","Col","sm","email","disabled","Flatpickr","instagram","twitch","changeUserPass","SignupSchema","oldPassword","newPassword","retypeNewPassword","oneOf","trigger","CONSTANTS","GAME_RANK","selectedRank","setSelectedRank","rank","filter","rk","playStationId","xboxId","accountNumber","ibanNumber","paypalEmail","UserPrefrences","payment","setPayment","chat","setChat","deposit","setDeposit","withdraw","setWithdraw","challange","setChallange","useDispatch","useSelector","preferences","getFieldValue","updateUserPrefrences","userId","localStorage","getItem","xs","CustomInput","checked","inline","useLocation","setActiveTab","referralUrl","window","origin","section","md","tab","Card","CardBody","InputGroup","outline","navigator","clipboard","writeText","TabContent","TabPane","tabId","GeneralTabContent"],"mappings":"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","file":"static/js/27.c7ffada2.chunk.js","sourcesContent":["import React from \"react\"\r\nimport RingLoader from \"react-spinners/RingLoader\"\r\n\r\nconst LoaderComponent = ({loading}) => {\r\n  \r\n  return loading && <div className=\"sweet-loading\">\r\n    <RingLoader color=\"#1061ae\" loading={loading} style={{ \r\n          display: \"block\",\r\n          margin: \"0 auto\"\r\n    }} size={100} />\r\n  </div>\r\n}\r\nexport default LoaderComponent","// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  UncontrolledButtonDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? <h2 className='content-header-title float-left mb-0'>{breadCrumbTitle}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/dashboard'>Dashboard</Link>\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent && <BreadcrumbItem tag='li' className='text-primary'>\r\n                  {breadCrumbParent}\r\n                </BreadcrumbItem>}\r\n                {breadCrumbParent2 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbParent3 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbActive && (\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>) }\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string\r\n}\r\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = props => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className\r\n        })}\r\n      >\r\n        <Input\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\r\n        </InputGroupAddon>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName, componentName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName, componentName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n","import { Nav, NavItem, NavLink } from 'reactstrap'\r\nimport { User, Lock, Info, Link, Bell, Home, Settings } from 'react-feather'\r\nimport { FormattedMessage } from 'react-intl'\r\n// import { GrUserSettings } from \"react-icons/gr\"\r\n\r\nconst Tabs = ({ activeTab, toggleTab }) => {\r\n  return (\r\n    <Nav className='nav-left' pills vertical>\r\n      <NavItem>\r\n        <NavLink active={activeTab === '1'} onClick={() => toggleTab('1')}>\r\n          <User size={18} className='mr-1' />\r\n          <span className='font-weight-bold'>General</span>\r\n        </NavLink>\r\n      </NavItem>\r\n      {/* <NavItem>\r\n        <NavLink active={activeTab === '2'} onClick={() => toggleTab('2')}>\r\n          <Info size={18} className='mr-1' />\r\n          <span className='font-weight-bold'>Info</span>\r\n        </NavLink>\r\n      </NavItem> */}\r\n      <NavItem>\r\n        <NavLink active={activeTab === '2'} onClick={() => toggleTab('2')}>\r\n          <Link size={18} className='mr-1' />\r\n          <span className='font-weight-bold'>Game Id & Rank</span>\r\n        </NavLink>\r\n      </NavItem>\r\n      <NavItem>\r\n        <NavLink active={activeTab === '3'} onClick={() => toggleTab('3')}>\r\n          <Home size={18} className='mr-1' />\r\n          <span className='font-weight-bold'>Bank Details</span>\r\n        </NavLink>\r\n      </NavItem>\r\n      <NavItem>\r\n        <NavLink active={activeTab === '4'} onClick={() => toggleTab('4')}>\r\n          <Lock size={18} className='mr-1' />\r\n          <span className='font-weight-bold'><FormattedMessage id=\"Change Password\" /></span>\r\n        </NavLink>\r\n      </NavItem>\r\n      <NavItem>\r\n        <NavLink active={activeTab === '5'} onClick={() => toggleTab('5')}>\r\n          <Bell size={18} className='mr-1' />\r\n          <span className='font-weight-bold'>User Prefrences</span>\r\n        </NavLink>\r\n      </NavItem>\r\n    </Nav>\r\n  )\r\n}\r\n\r\nexport default Tabs\r\n","import React, { useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { FormFeedback, FormGroup, Input, Label } from 'reactstrap'\r\nimport classnames from 'classnames'\r\nimport { connect } from 'react-redux'\r\nimport {getAllCountries, removeCountryData} from '../../../redux/actions/country'\r\nimport LoaderComponent from '../Loader'\r\nimport { selectThemeColors } from '@utils'\r\nimport Select from 'react-select'\r\nimport {Controller} from 'react-hook-form'\r\n\r\n\r\nfunction CountryDropdown({country, loading, getAllCountries, removeCountryData, value, errors, register, control, setValue }) {\r\n    useEffect(() => {\r\n        getAllCountries()\r\n        return () => removeCountryData()\r\n    }, [])\r\n    \r\n    const countryOptions = countryOp => {\r\n        return countryOp ? countryOp.map(c => ({ value:c.isoCode, label:c.countryName })) : []\r\n    }\r\n    const getDefaultValue = value => {\r\n        const countryOp = country.find(c => c.countryName === value)\r\n        return  countryOp ? {value: countryOp.isoCode, label: countryOp.countryName} : null\r\n    }\r\n    return country && country.length ? (\r\n        <div>\r\n            <LoaderComponent loading={loading} />\r\n            <FormGroup>\r\n                <Label for='country'>Country</Label>\r\n                <Controller\r\n                    isClearable\r\n                    as={Select}\r\n                    id='country'\r\n                    control={control}\r\n                    name='country'\r\n                    defaultValue={getDefaultValue(value)}\r\n                    options={country && countryOptions(country)}\r\n                    className={classnames('country', {\r\n                        'is-invalid': errors.country\r\n                    })}\r\n                    innerRef={register({ required: true })}\r\n                    classNamePrefix='select'\r\n                    theme={selectThemeColors} />\r\n                {errors && errors.country && <FormFeedback>{errors.country.message}</FormFeedback>}\r\n            </FormGroup>    \r\n        </div>\r\n    ) : null\r\n}\r\n\r\nCountryDropdown.propTypes = {\r\n    getAllCountries: PropTypes.func.isRequired,\r\n    removeCountryData: PropTypes.func.isRequired,\r\n    loading: PropTypes.bool.isRequired,\r\n    country: PropTypes.array.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loading: state.country.loading,\r\n    country: state.country.country\r\n})\r\nexport default connect(mapStateToProps, {getAllCountries, removeCountryData})(CountryDropdown)\r\n\r\n","import {SET_LOADER, SET_COUNTRY_DETAILS, REMOVE_COUNTRY_DETAILS} from '../../types'\r\nimport client from '../../../graphql/client'\r\nimport gql from 'graphql-tag'\r\n\r\nexport const getAllCountries = () => async dispatch => {\r\n    dispatch({\r\n        type: SET_LOADER,\r\n        payload: true\r\n    })\r\n    const CountryQuery = gql`\r\n        query countries{\r\n            countries{\r\n                statusCode\r\n                success\r\n                data{\r\n                    countryName\r\n                    isoCode\r\n                }\r\n            }\r\n        }\r\n    `\r\n    const {data} = await client.query({\r\n        query: CountryQuery\r\n    })\r\n    if (data.countries.success) {\r\n        dispatch({\r\n            type: SET_COUNTRY_DETAILS,\r\n            payload: data.countries.data\r\n        })\r\n    }\r\n    dispatch({\r\n        type: SET_LOADER,\r\n        payload: false\r\n    })\r\n    \r\n}\r\n\r\nexport const removeCountryData = () => dispatch => {\r\n    dispatch({\r\n        type: REMOVE_COUNTRY_DETAILS,\r\n        payload: {}\r\n    })\r\n}","import { Fragment, useState, useEffect } from 'react'\r\nimport classnames from 'classnames'\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport { Button, Media, Label, Row, Col, Input, FormGroup, FormFeedback, Form } from 'reactstrap'\r\nimport * as yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport _ from 'underscore'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport {updateUserProfile, uploadProfilePhoto} from '../../../redux/actions/auth'\r\nimport {showToastMessage} from '../../../redux/actions/toastNotification'\r\nimport CountryDropdown from '../../components/CountryDropdown'\r\nimport Flatpickr from 'react-flatpickr'\r\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\r\n\r\nconst GeneralTabs = ({ user, showToastMessage, updateUserProfile, uploadProfilePhoto }) => {\r\n  const [avatar, setAvatar] = useState(user.profileImage ? user.profileImage : 'https://cdn.iconscout.com/icon/premium/png-512-thumb/profile-1506810-1278719.png')\r\n  \r\n  const genralTabSchema = yup.object().shape({\r\n    userName: yup.string().min(6).required(),\r\n    firstName: yup.string().required(),\r\n    lastName: yup.string().required()\r\n  })\r\n  \r\n  useEffect(() => {\r\n    if (!_.isEmpty(user)) {\r\n      setAvatar(user.profileImage)\r\n    }\r\n  }, [user])\r\n  const { register, errors, handleSubmit, control, setValue } = useForm({ mode: 'onBlur', resolver: yupResolver(genralTabSchema), defaultValues: {birthDate: user.birthDate ? new Date(parseInt(user.birthDate)) : new Date()} })\r\n  \r\n  const onChange = e => {\r\n    const reader = new FileReader(),\r\n      files = e.target.files\r\n    reader.onload = async function () {\r\n      setAvatar(reader.result)\r\n      try {\r\n        const result = await uploadProfilePhoto(files[0])\r\n        const resultType = result.success ? \"success\" : \"error\"\r\n        showToastMessage(result.message, resultType)\r\n        setTimeout(() => {\r\n          location.reload()\r\n        }, 0)\r\n      } catch (error) {\r\n        console.error('error: ', error)\r\n        showToastMessage(error.message, 'error')\r\n      }\r\n    }\r\n    reader.readAsDataURL(files[0])\r\n  }\r\n\r\n  const onSubmit = async data => {\r\n    if (_.isEmpty(errors)) {\r\n      try {\r\n        delete data['email']\r\n        const {birthDate, country} = data\r\n        console.log(data)\r\n        delete data['birthDate']\r\n        delete data['country']\r\n        const result = await updateUserProfile({\r\n          ...data,\r\n          birthDate: birthDate[0]\r\n          // country: country.label\r\n        })\r\n        const resultType = result.success ? \"success\" : \"error\"\r\n        showToastMessage(result.message, resultType)\r\n      } catch (error) {\r\n        console.error('error: ', error)\r\n        showToastMessage(error.message, 'error')\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  return !_.isEmpty(user) ? (\r\n    <Fragment>\r\n      <Media>\r\n        <Media className='mr-25' left>\r\n          <Media object className='rounded mr-50' src={avatar} alt='Generic placeholder image' height='80' width='80' />\r\n        </Media>\r\n        <Media className='mt-75 ml-1' body>\r\n          <Button.Ripple tag={Label} className='mr-75' size='sm' color='primary'>\r\n            Upload\r\n            <Input type='file' onChange={onChange} hidden accept='image/*' />\r\n          </Button.Ripple>\r\n          <p>Allowed JPG, GIF or PNG. Max size of 800kB</p>\r\n        </Media>\r\n      </Media>\r\n      <Form className='mt-2' onSubmit={handleSubmit(onSubmit)}>\r\n        <Row>\r\n          <Col sm='6'>\r\n            <FormGroup>\r\n              <Label for='userName'>Username</Label>\r\n              <Controller\r\n                defaultValue={user.userName}\r\n                control={control}\r\n                as={Input}\r\n                id='userName'\r\n                name='userName'\r\n                placeholder='Username'\r\n                innerRef={register({ required: true })}\r\n                onChange={e => setValue('userName', e.target.value)}\r\n                className={classnames({\r\n                  'is-invalid': errors.userName\r\n                })}\r\n              />\r\n              {errors && errors.userName && <FormFeedback>{errors.userName.message}</FormFeedback>}\r\n            </FormGroup>\r\n          </Col>\r\n          <Col sm='6'>\r\n            <FormGroup>\r\n              <Label for='email'>E-mail</Label>\r\n              <Controller\r\n                defaultValue={user.email}\r\n                control={control}\r\n                as={Input}\r\n                type='email'\r\n                id='email'\r\n                name='email'\r\n                placeholder='Email'\r\n                innerRef={register({ required: true })}\r\n                onChange={e => setValue('email', e.target.value)}\r\n                className={classnames({\r\n                  'is-invalid': errors.email\r\n                })}\r\n                disabled\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n          <Col sm='6'>\r\n            <FormGroup>\r\n              <Label for='name'>First Name</Label>\r\n              <Controller\r\n                defaultValue={user.firstName}\r\n                control={control}\r\n                as={Input}\r\n                id='name'\r\n                name='firstName'\r\n                placeholder='Name'\r\n                innerRef={register({ required: true })}\r\n                onChange={e => setValue('firstName', e.target.value)}\r\n                className={classnames({\r\n                  'is-invalid': errors.firstName\r\n                })}\r\n              />\r\n              {errors && errors.firstName && <FormFeedback>{errors.firstName.message}</FormFeedback>}\r\n            </FormGroup>\r\n          </Col>\r\n          <Col sm='6'>\r\n            <FormGroup>\r\n              <Label for='name'>Last Name</Label>\r\n              <Controller\r\n                defaultValue={user.lastName}\r\n                control={control}\r\n                as={Input}\r\n                id='name'\r\n                name='lastName'\r\n                placeholder='Name'\r\n                innerRef={register({ required: true })}\r\n                onChange={e => setValue('lastName', e.target.value)}\r\n                className={classnames({\r\n                  'is-invalid': errors.lastName\r\n                })}\r\n              />\r\n              {errors && errors.lastName && <FormFeedback>{errors.lastName.message}</FormFeedback>}\r\n            </FormGroup>\r\n          </Col>\r\n          <Col sm='6'>\r\n          <FormGroup>\r\n            <Label for='birth-date'>Birth Date</Label>\r\n            <Controller\r\n              name='birthDate'\r\n              as={Flatpickr}\r\n              id='birth-date'\r\n              control={control}\r\n              placeholder='Birth Date'\r\n              defaultValue={user.birthDate}\r\n              onChange={e => setValue('birthDate', e.target.value)}\r\n              className={classnames('form-control', {\r\n                'is-invalid': errors.birthDate\r\n              })}\r\n            />\r\n              {errors && errors.birthDate && <FormFeedback>{errors.birthDate.message}</FormFeedback>}\r\n          </FormGroup>\r\n        </Col>\r\n        <Col sm='6'>\r\n          <CountryDropdown errors={errors} register={register} control={control} value={user.country} setValue={setValue} />\r\n        </Col>\r\n        <Col sm='6'>\r\n            <FormGroup>\r\n              <Label for='instagram'>Instagram Profile</Label>\r\n              <Controller\r\n                defaultValue={user.instagram}\r\n                control={control}\r\n                as={Input}\r\n                id='instagram'\r\n                name='instagram'\r\n                placeholder='Instagram Profile'\r\n                onChange={e => setValue('instagram', e.target.value)}\r\n                className={classnames({\r\n                  'is-invalid': errors.instagram\r\n                })}\r\n              />\r\n              {errors && errors.instagram && <FormFeedback>{errors.instagram.message}</FormFeedback>}\r\n            </FormGroup>\r\n          </Col>\r\n          <Col sm='6'>\r\n            <FormGroup>\r\n              <Label for='twitch'>Twitch Account</Label>\r\n              <Controller\r\n                defaultValue={user.twitch}\r\n                control={control}\r\n                as={Input}\r\n                id='twitch'\r\n                name='twitch'\r\n                placeholder='Twitch Account'\r\n                onChange={e => setValue('twitch', e.target.value)}\r\n                className={classnames({\r\n                  'is-invalid': errors.twitch\r\n                })}\r\n              />\r\n              {errors && errors.twitch && <FormFeedback>{errors.twitch.message}</FormFeedback>}\r\n            </FormGroup>\r\n          </Col>\r\n          <Col className='mt-2' sm='12'>\r\n            <Button.Ripple type='submit' className='mr-1' color='primary'>\r\n              Save changes\r\n            </Button.Ripple>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Fragment>\r\n  ) : null\r\n}\r\n\r\nGeneralTabs.propTypes = {\r\n  showToastMessage: PropTypes.func.isRequired,\r\n  updateUserProfile: PropTypes.func.isRequired,\r\n  uploadProfilePhoto: PropTypes.func.isRequired,\r\n  loading: PropTypes.bool.isRequired,\r\n  user: PropTypes.object.isRequired\r\n}\r\nconst mapStateToProps = state => ({\r\n    loading: state.auth.loading,\r\n    user: state.auth.user\r\n})\r\nexport default connect(mapStateToProps, {uploadProfilePhoto, updateUserProfile, showToastMessage})(GeneralTabs)\r\n","import * as yup from 'yup'\r\nimport classnames from 'classnames'\r\nimport { useForm } from 'react-hook-form'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { Form, FormGroup, Row, Col, Button, FormFeedback } from 'reactstrap'\r\nimport InputPasswordToggle from '@components/input-password-toggle'\r\nimport _ from 'underscore'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport {changeUserPass} from '../../../redux/actions/auth'\r\nimport {showToastMessage} from '../../../redux/actions/toastNotification'\r\n\r\n\r\nconst PasswordTabContent = ({changeUserPass, showToastMessage}) => {\r\n  const SignupSchema = yup.object().shape({\r\n    oldPassword: yup.string().required(),\r\n    newPassword: yup.string().required(),\r\n    retypeNewPassword: yup\r\n      .string()\r\n      .required()\r\n      .oneOf([yup.ref(`newPassword`), null], 'Passwords must match')\r\n  })\r\n\r\n  const { register, errors, handleSubmit, setValue, trigger } = useForm({\r\n    resolver: yupResolver(SignupSchema)\r\n  })\r\n\r\n  const onSubmit = async (data) => {\r\n    if (_.isEmpty(errors)) {\r\n      try {\r\n        const result = await changeUserPass(data.newPassword, data.oldPassword)\r\n        const resultType = result.success ? \"success\" : \"error\"\r\n        setValue('oldPassword', '')\r\n        setValue('newPassword', '')\r\n        setValue('retypeNewPassword', '')\r\n        showToastMessage(result.message, resultType)\r\n      } catch (error) {\r\n        console.error('error: ', error)\r\n        showToastMessage(error.message, 'error')\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit(onSubmit)}>\r\n      <Row>\r\n        <Col sm='6'>\r\n          <FormGroup>\r\n            <InputPasswordToggle\r\n              label='Old Password'\r\n              htmlFor='oldPassword'\r\n              name='oldPassword'\r\n              innerRef={register({ required: true })}\r\n              className={classnames('input-group-merge', {\r\n                'is-invalid': errors['oldPassword']\r\n              })}\r\n            />\r\n            {errors && errors.oldPassword && <FormFeedback>{errors.oldPassword.message}</FormFeedback>}\r\n          </FormGroup>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col sm='6'>\r\n          <FormGroup>\r\n            <InputPasswordToggle\r\n              label='New Password'\r\n              htmlFor='newPassword'\r\n              name='newPassword'\r\n              innerRef={register({ required: true })}\r\n              className={classnames('input-group-merge', {\r\n                'is-invalid': errors['newPassword']\r\n              })}\r\n            />\r\n            {errors && errors.newPassword && <FormFeedback>{errors.newPassword.message}</FormFeedback>}\r\n          </FormGroup>\r\n        </Col>\r\n        <Col sm='6'>\r\n          <FormGroup>\r\n            <InputPasswordToggle\r\n              label='Retype New Password'\r\n              htmlFor='retypeNewPassword'\r\n              name='retypeNewPassword'\r\n              innerRef={register({ required: true })}\r\n              className={classnames('input-group-merge', {\r\n                'is-invalid': errors['retypeNewPassword']\r\n              })}\r\n            />\r\n            {errors && errors.retypeNewPassword && <FormFeedback>{errors.retypeNewPassword.message}</FormFeedback>}\r\n          </FormGroup>\r\n        </Col>\r\n        <Col className='mt-1' sm='12'>\r\n          <Button.Ripple type='submit' className='mr-1' color='primary'>\r\n            Save changes\r\n          </Button.Ripple>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  )\r\n}\r\n\r\nPasswordTabContent.propTypes = {\r\n  showToastMessage: PropTypes.func.isRequired,\r\n  changeUserPass: PropTypes.func.isRequired\r\n}\r\nconst mapStateToProps = state => ({\r\n})\r\nexport default connect(mapStateToProps, {changeUserPass, showToastMessage})(PasswordTabContent)\r\n","import { useState, useEffect } from 'react'\r\nimport { Form, Label, Input, Button, Row, Col, FormGroup, FormFeedback } from 'reactstrap'\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport classnames from 'classnames'\r\nimport _ from 'underscore'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport {updateUserProfile} from '../../../redux/actions/auth'\r\nimport {showToastMessage} from '../../../redux/actions/toastNotification'\r\nimport { selectThemeColors } from '@utils'\r\nimport {CONSTANTS} from '../../../utils/CONSTANTS'\r\nimport Select from 'react-select'\r\n\r\n\r\nconst PsnTabContent = ({ user, showToastMessage, updateUserProfile }) => {\r\n  const { register, errors, handleSubmit, setValue } = useForm({ mode: 'onBlur' })\r\n\r\n  const [selectedRank, setSelectedRank] = useState(CONSTANTS.GAME_RANK[0])\r\n\r\n  useEffect(() => {\r\n    const rank = user?.rank\r\n    if (rank) {\r\n      setSelectedRank(CONSTANTS.GAME_RANK.filter(rk => rk.value === rank))\r\n    }\r\n    return () => {\r\n    }\r\n  }, [user])\r\n\r\n  const onSubmit = async data => {\r\n    if (_.isEmpty(errors)) {\r\n      try {\r\n        const {playStationId = \"\", xboxId = \"\"} = data\r\n        if (playStationId || xboxId) {\r\n          const result = await updateUserProfile({...data, rank: selectedRank.value})\r\n          const resultType = result.success ? \"success\" : \"error\"\r\n          showToastMessage(result.message, resultType)\r\n        } else {\r\n          showToastMessage(\"You need to provide either both Playstation/XBox id or any one of them\", \"error\")\r\n        }\r\n      } catch (error) {\r\n        console.error('error: ', error)\r\n        showToastMessage(error.message, 'error')\r\n      }\r\n    }\r\n  }\r\n\r\n  return !_.isEmpty(user) ? (\r\n    <Form onSubmit={handleSubmit(onSubmit)}>\r\n      <Row>\r\n        <Col sm='6'>\r\n          <FormGroup>\r\n            <Label for='playStationId'>Playstation Id</Label>\r\n            <Input\r\n              id='playStationId'\r\n              name='playStationId'\r\n              defaultValue={user.playStationId || ''}\r\n              placeholder='Playstation Id'\r\n              className={classnames({\r\n                'is-invalid': errors.playStationId\r\n              })}\r\n              onChange={e => setValue('playStationId', e.target.value)}\r\n              innerRef={register({ required: false })}\r\n            />\r\n              {errors && errors.playStationId && <FormFeedback>{errors.playStationId.message}</FormFeedback>}\r\n          </FormGroup>\r\n        </Col>\r\n        <Col sm='6'>\r\n          <FormGroup>\r\n            <Label for='xboxId'>Xbox Id</Label>\r\n            <Input\r\n              id='xboxId'\r\n              name='xboxId'\r\n              defaultValue={user.xboxId || ''}\r\n              placeholder='X-box Id'\r\n              className={classnames({\r\n                'is-invalid': errors.xboxId\r\n              })}\r\n              onChange={e => setValue('xboxId', e.target.value)}\r\n              innerRef={register({ required: false })}\r\n            />\r\n              {errors && errors.xboxId && <FormFeedback>{errors.xboxId.message}</FormFeedback>}\r\n          </FormGroup>\r\n        </Col>\r\n        {/* <Col sm='6'>\r\n          <FormGroup>\r\n            <Label for='epicGamesId'>Epic Games Id</Label>\r\n            <Input\r\n              id='epicGamesId'\r\n              name='epicGamesId'\r\n              defaultValue={user.epicGamesId || ''}\r\n              placeholder=\"Epic Games Id\"\r\n              className={classnames({\r\n                'is-invalid': errors.epicGamesId\r\n              })}\r\n              onChange={e => setValue('epicGamesId', e.target.value)}\r\n              innerRef={register({ required: true })}\r\n            />\r\n            {errors && errors.epicGamesId && <FormFeedback>{errors.epicGamesId.message}</FormFeedback>}\r\n          </FormGroup>\r\n        </Col> */}\r\n        <Col sm='6'>\r\n          <FormGroup>\r\n            <Label for='rank'>WL Rank</Label>\r\n            <Select\r\n              theme={selectThemeColors}\r\n              isClearable={false}\r\n              id={`rank–type`}\r\n              className='react-select'\r\n              classNamePrefix='select'\r\n              options={CONSTANTS.GAME_RANK}\r\n              onChange={(value) => { setSelectedRank(value) } }\r\n              defaultValue={CONSTANTS.GAME_RANK[0]}\r\n              value={selectedRank}\r\n              placeholder=\"Select WL Rank\"\r\n              innerRef={register({ required: true })}\r\n            />\r\n              {errors && errors.rank && <FormFeedback>{errors.rank.message}</FormFeedback>}\r\n          </FormGroup>\r\n        </Col>\r\n        <Col className='mt-1' sm='12'>\r\n          <Button.Ripple className='mr-1'  type=\"submit\" color='primary'>\r\n            Save changes\r\n          </Button.Ripple>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  ) : null\r\n}\r\n\r\nPsnTabContent.propTypes = {\r\n  showToastMessage: PropTypes.func.isRequired,\r\n  updateUserProfile: PropTypes.func.isRequired,\r\n  loading: PropTypes.bool.isRequired,\r\n  user: PropTypes.object.isRequired\r\n}\r\nconst mapStateToProps = state => ({\r\n    loading: state.auth.loading,\r\n    user: state.auth.user\r\n})\r\n\r\nexport default connect(mapStateToProps, {updateUserProfile, showToastMessage})(PsnTabContent)\r\n","import { Form, Label, Input, Button, Row, Col, FormGroup } from 'reactstrap'\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport classnames from 'classnames'\r\nimport _ from 'underscore'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport {updateUserProfile} from '../../../redux/actions/auth'\r\nimport {showToastMessage} from '../../../redux/actions/toastNotification'\r\n\r\n\r\nconst BankDetailsTabContent = ({ user, showToastMessage, updateUserProfile }) => {\r\n  const { register, errors, handleSubmit, control, setValue } = useForm({ mode: 'onBlur' })\r\n\r\n  const onSubmit = async data => {\r\n    if (_.isEmpty(errors)) {\r\n      try {\r\n        // const {birthDate, country, phone, bio} = data\r\n        const result = await updateUserProfile(data)\r\n        const resultType = result.success ? \"success\" : \"error\"\r\n        showToastMessage(result.message, resultType)\r\n      } catch (error) {\r\n        console.error('error: ', error)\r\n        showToastMessage(error.message, 'error')\r\n      }\r\n    }\r\n  }\r\n\r\n  return !_.isEmpty(user) ? (\r\n    <Form onSubmit={handleSubmit(onSubmit)}>\r\n      <Row>\r\n        <Col sm='6'>\r\n          <FormGroup>\r\n            <Label for='accountNumber'>Account Benficiary</Label>\r\n            <Input\r\n              id='accountNumber'\r\n              name='accountNumber'\r\n              defaultValue={user.accountNumber || ''}\r\n              placeholder='Account Benficiary'\r\n              className={classnames({\r\n                'is-invalid': errors.accountNumber\r\n              })}\r\n              innerRef={register({ required: true })}\r\n            />\r\n          </FormGroup>\r\n        </Col>\r\n        <Col sm='6'>\r\n          <FormGroup>\r\n            <Label for='ibanNumber'>IBAN Number</Label>\r\n            <Input\r\n              id='ibanNumber'\r\n              name='ibanNumber'\r\n              defaultValue={user.ibanNumber || ''}\r\n              placeholder='X-box Id'\r\n              className={classnames({\r\n                'is-invalid': errors.ibanNumber\r\n              })}\r\n              innerRef={register({ required: true })}\r\n            />\r\n          </FormGroup>\r\n        </Col>\r\n        <Col sm='6'>\r\n          <FormGroup>\r\n            <Label for='paypalEmail'>Paypal Email</Label>\r\n            <Input\r\n              id='paypalEmail'\r\n              name='paypalEmail'\r\n              defaultValue={user.paypalEmail || ''}\r\n              placeholder=\"Paypal Email\"\r\n              className={classnames({\r\n                'is-invalid': errors.paypalEmail\r\n              })}\r\n              innerRef={register({ required: true })}\r\n            />\r\n          </FormGroup>\r\n        </Col>\r\n        <Col className='mt-1' sm='12'>\r\n          <Button.Ripple type='submit' className='mr-1' color='primary'>\r\n            Save changes\r\n          </Button.Ripple>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  ) : null\r\n}\r\n\r\nBankDetailsTabContent.propTypes = {\r\n  showToastMessage: PropTypes.func.isRequired,\r\n  updateUserProfile: PropTypes.func.isRequired,\r\n  loading: PropTypes.bool.isRequired,\r\n  user: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loading: state.auth.loading,\r\n    user: state.auth.user\r\n})\r\n\r\nexport default connect(mapStateToProps, {updateUserProfile, showToastMessage})(BankDetailsTabContent)\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Button, Col, CustomInput, FormGroup, Label, Row } from 'reactstrap'\r\nimport _ from \"underscore\"\r\nimport {updateUserPrefrences} from '../../../redux/actions/auth'\r\nimport {showToastMessage} from '../../../redux/actions/toastNotification'\r\nimport { getFieldValue } from '../../../utils'\r\n\r\nexport default function UserPrefrences() {\r\n    \r\n    const [payment, setPayment] = useState(false)\r\n    const [chat, setChat] = useState(false)\r\n    const [deposit, setDeposit] = useState(false)\r\n    const [withdraw, setWithdraw] = useState(false)\r\n    const [challange, setChallange] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const {user} = useSelector(state => state.auth)\r\n    \r\n    useEffect(() => {\r\n        if (!_.isEmpty(user.preferences)) {\r\n            setChat(!!getFieldValue(user, \"preferences.chat\"))\r\n            setPayment(!!getFieldValue(user, \"preferences.payment\"))\r\n            setDeposit(!!getFieldValue(user, \"preferences.deposit\"))\r\n            setWithdraw(!!getFieldValue(user, \"preferences.withdraw\"))\r\n            setChallange(!!getFieldValue(user, \"preferences.challange\"))\r\n        }\r\n        return () => {\r\n            setChat(false)\r\n            setPayment(false)\r\n            setDeposit(false)\r\n            setWithdraw(false)\r\n            setChallange(false)\r\n        }\r\n    }, [user.preferences])\r\n\r\n    const onSubmit = async () => {\r\n        try {\r\n            dispatch(updateUserPrefrences({userId: localStorage.getItem(\"userId\"), chat, deposit, withdraw, challange, payment}))\r\n        } catch (error) {\r\n            console.error('%c 🍫 error: ', 'font-size:20px;background-color: #465975;color:#fff;', error)\r\n            \r\n        }\r\n    }\r\n    return !_.isEmpty(user) ? (<>\r\n        <Row>\r\n            <Col xs={12}>\r\n                <FormGroup>\r\n                    <Row>\r\n                        <Col xs={8}>\r\n                            <Label for='chat'>Chat Notification (Room creation, Message received)</Label>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <CustomInput type='switch' id='chat' name='icon-primary' checked={chat} onChange={() => setChat(!chat)} inline />\r\n                        </Col>\r\n                    </Row>\r\n                </FormGroup>\r\n            </Col>\r\n            <Col xs={12}>\r\n                <FormGroup>\r\n                    <Row>\r\n                        <Col xs={8}>\r\n                            <Label for='withdraw'>Withdraw (We will provide notifcation for the successful or failed transaction)</Label>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <CustomInput type='switch' id='withdraw' name='icon-primary' onChange={() => setWithdraw(!withdraw)} checked={withdraw} />\r\n                        </Col>\r\n                    </Row>\r\n                </FormGroup>\r\n            </Col>\r\n            <Col xs={12}>\r\n                <FormGroup>\r\n                    <Row>\r\n                        <Col xs={8}>\r\n                            <Label for='deposit'>Deposit (We will provide notifcation for succcessful deposit or failed transaction)</Label>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <CustomInput type='switch' id='deposit' name='icon-primary' onChange={() => setDeposit(!deposit)} checked={deposit} />\r\n                        </Col>\r\n                    </Row>\r\n                </FormGroup>\r\n            </Col>\r\n            <Col xs={12}>\r\n                <FormGroup>\r\n                    <Row>\r\n                        <Col xs={8}>\r\n                            <Label for='challange'>Challange (User will get notification for challange invite challange accepted and result)</Label>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <CustomInput type='switch' id='challange' name='icon-primary' onChange={() => setChallange(!challange)} checked={challange} />\r\n                        </Col>\r\n                    </Row>\r\n                </FormGroup>\r\n            </Col>\r\n            <Col className='mt-1' sm='12'>\r\n                <Button.Ripple onClick={onSubmit} className='mr-1' color='primary'>\r\n                    Save changes\r\n                </Button.Ripple>\r\n            </Col>\r\n        </Row>\r\n    </>) : null\r\n}\r\n","import React, { Fragment, useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Tabs from './components/Tabs'\r\nimport Breadcrumbs from '@components/breadcrumbs'\r\nimport { Row, Col, TabContent, TabPane, Card, CardBody, InputGroup, Input, Button } from 'reactstrap'\r\nimport { showToastMessage } from '../../redux/actions/toastNotification'\r\n\r\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\r\nimport '@styles/react/pages/page-account-settings.scss'\r\nimport { connect } from 'react-redux'\r\nimport GeneralTabContent from './components/GeneralTabContent'\r\nimport PasswordTabContent from './components/PasswordTabContent'\r\n// import InfoTabContent from './components/InfoTabContent'\r\nimport PsnTabContent from './components/PsnTabContent'\r\nimport BankDetailsTabContent from './components/BankDetailsTabContent'\r\nimport LoaderComponent from '../components/Loader'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { Copy } from 'react-feather'\r\nimport UserPrefrences from './components/UserPrefrences'\r\nimport { useLocation } from 'react-router-dom'\r\nfunction Profile({loading, user, showToastMessage}) {\r\n    const location = useLocation()\r\n    const [activeTab, setActiveTab] = useState('1'),\r\n    [data, setData] = useState(null)\r\n\r\n    const toggleTab = tab => {\r\n        setActiveTab(tab)\r\n    }\r\n    const referralUrl = `${window.location.origin}/register?referral-id=${localStorage.getItem(\"userId\")}`\r\n\r\n    useEffect(() => {\r\n        if (location?.state?.section) {\r\n            setActiveTab(location?.state?.section)\r\n        }\r\n    }, [location])\r\n\r\n    return (\r\n        <Fragment>\r\n            <LoaderComponent loading={loading} />\r\n            <Breadcrumbs breadCrumbTitle={<FormattedMessage id=\"My Profile\" />} breadCrumbActive={<FormattedMessage id=\"My Profile\" />} />\r\n            <Row>\r\n                {user ?\r\n                    <>\r\n                        <Col className='mb-2 mb-md-0' md='3'>\r\n                            <Tabs activeTab={activeTab} toggleTab={toggleTab} />\r\n                        </Col>\r\n                        <Col md='9'>\r\n                            <Card className=\"mb-2\">\r\n                                <CardBody>\r\n                                    <Row>\r\n                                        <Col className='mb-1' md='12'>\r\n                                            <InputGroup>\r\n                                                <Input \r\n                                                    type='url'\r\n                                                    id='referralUrl'\r\n                                                    name='referralUrl'\r\n                                                    placeholder={referralUrl}\r\n                                                    defaultValue={referralUrl}\r\n                                                    disabled\r\n                                                />\r\n                                                <Button.Ripple outline color='primary' onClick={() => { \r\n                                                navigator.clipboard.writeText(referralUrl) \r\n                                                showToastMessage(\"copied!\", \"info\")\r\n                                                }}>\r\n                                                    <Copy size={14} />\r\n                                                    <span className='align-middle ms-25 ml-1'>Copy</span>\r\n                                                </Button.Ripple>\r\n                                            </InputGroup>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                </CardBody>\r\n                            </Card>\r\n                            <Card>\r\n                                <CardBody>\r\n                                    <TabContent activeTab={activeTab}>\r\n                                        <TabPane tabId='1'>\r\n                                            <GeneralTabContent />\r\n                                        </TabPane>\r\n                                        {/* <TabPane tabId='2'>\r\n                                            <InfoTabContent />\r\n                                        </TabPane> */}\r\n                                        <TabPane tabId='2'>\r\n                                            <PsnTabContent />\r\n                                        </TabPane>\r\n                                        <TabPane tabId='3'>\r\n                                            <BankDetailsTabContent />\r\n                                        </TabPane>\r\n                                        <TabPane tabId='4'>\r\n                                            <PasswordTabContent />\r\n                                        </TabPane>\r\n                                        <TabPane tabId=\"5\">\r\n                                            <UserPrefrences />\r\n                                        </TabPane>\r\n                                    </TabContent>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </>\r\n                : null}\r\n            </Row>\r\n      </Fragment>\r\n    )\r\n}\r\n\r\nProfile.propTypes = {\r\n    loading: PropTypes.bool.isRequired,\r\n    user: PropTypes.object.isRequired,\r\n    showToastMessage: PropTypes.func.isRequired\r\n}\r\nconst mapStateToProps = state => ({\r\n    loading: state.auth.loading,\r\n    user: state.auth.user\r\n})\r\nexport default connect(mapStateToProps, {showToastMessage})(Profile)\r\n\r\n"],"sourceRoot":""}