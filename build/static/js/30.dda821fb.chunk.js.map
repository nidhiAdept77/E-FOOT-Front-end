{"version":3,"sources":["views/components/Loader/index.js","@core/components/breadcrumbs/index.js","redux/actions/wallet/index.js","@core/components/timeline/index.js","views/Dashboard/components/CardUserTimeline.js","views/Dashboard/components/ChallangeOverview.js","views/Dashboard/components/WinsCards.js","@core/components/widgets/stats/TinyChartStats.js","views/Dashboard/components/ChallangesCard.js","views/Dashboard/components/CardTransactions.js","views/Dashboard/index.js"],"names":["LoaderComponent","loading","className","color","style","display","margin","size","BreadCrumbs","props","breadCrumbTitle","breadCrumbParent","breadCrumbParent2","breadCrumbParent3","breadCrumbActive","tag","to","active","getUserTransactions","limit","page","searchString","isCompleted","dispatch","type","SET_LOADER","payload","UsersTransactionsQuery","gql","client","query","variables","skip","data","handleAuthResponse","getPaginatedTransactions","success","transactions","getFieldValue","SET_USERS_TRANSACTIONS","SET_TOTAL","totalPages","console","error","message","removeUserTrasaction","getTransaction","txnId","require","SET_TRANSACTION","TransactionQuery","getTransactionsByTxnId","transaction","removeTransaction","Timeline","Tag","classnames","map","item","i","ItemTag","icon","meta","title","metaClassName","length","customContent","content","UserTimeline","useDispatch","userActivities","useSelector","state","dashboard","useState","activities","setActivities","useEffect","getUserActivities","Card","id","CardHeader","CardTitle","placement","target","CardBody","activity","includes","moment","Date","parseInt","createdAt","fromNow","ChallangeOverview","details","wins","loss","lastMatches","totalChallenges","totalPlayers","points","position","completed","inProgress","setData","challengePercentage","parseFloat","toFixed","options","chart","sparkline","enabled","dropShadow","blur","left","top","opacity","colors","plotOptions","radialBar","offsetY","startAngle","endAngle","hollow","track","background","strokeWidth","dataLabels","name","show","value","fontFamily","fontSize","fontWeight","fill","gradient","shade","shadeIntensity","gradientToColors","inverseColors","opacityFrom","opacityTo","stops","stroke","lineCap","grid","padding","bottom","series","isNaN","height","Row","Col","xs","CardText","WinsCards","info","tooltip","Object","keys","match","challengerName","winLoseScore","opponentName","TinyChartStats","stats","cardClasses","defaultProps","ChallangesCard","warning","statistics","x","y","stacked","toolbar","right","bar","horizontal","columnWidth","startingShape","backgroundBarColors","backgroundBarRadius","legend","xaxis","labels","axisBorder","axisTicks","yaxis","toString","CardTransactions","userTransactions","wallet","index","CONSTANTS","TRANSACTION_TYPE","WITHDRAW","Media","body","transactionType","reason","amount","connect","auth","dashboardUserId","userDashboardDetails","user","_id","currentLoggedInUser","setDetails","userId","setUserId","loggedInUser","setLoggedInUser","getDashboardDetails","setDashboardUserId","useContext","ThemeColors","Loader","onClick","lg","md","sm","main","primary","OnlineUsers","showheader","trackBgColor","CardUserTimeline"],"mappings":"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","file":"static/js/30.dda821fb.chunk.js","sourcesContent":["import React from \"react\"\r\nimport RingLoader from \"react-spinners/RingLoader\"\r\n\r\nconst LoaderComponent = ({loading}) => {\r\n  \r\n  return loading && <div className=\"sweet-loading\">\r\n    <RingLoader color=\"#1061ae\" loading={loading} style={{ \r\n          display: \"block\",\r\n          margin: \"0 auto\"\r\n    }} size={100} />\r\n  </div>\r\n}\r\nexport default LoaderComponent","// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  UncontrolledButtonDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? <h2 className='content-header-title float-left mb-0'>{breadCrumbTitle}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/dashboard'>Dashboard</Link>\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent && <BreadcrumbItem tag='li' className='text-primary'>\r\n                  {breadCrumbParent}\r\n                </BreadcrumbItem>}\r\n                {breadCrumbParent2 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbParent3 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbActive && (\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>) }\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string\r\n}\r\n","import {request} from '../../../utils/apiService'\r\nimport {getFieldValue, handleAuthResponse} from '../../../utils'\r\nimport { CONSTANTS } from '@src/utils/CONSTANTS'\r\nimport {SET_LOADER, SET_USERS_PAYMENT_METHODS, SET_USERS_TRANSACTIONS, SET_TOTAL} from '../../types'\r\nimport client from '../../../graphql/client'\r\nimport gql from 'graphql-tag'\r\n\r\n\r\nexport const addUserPaymentMethods = () => async dispatch => {\r\n    const authtoken = localStorage.getItem('authToken')\r\n    const userId = localStorage.getItem('userId')\r\n    const {getFieldValue} = require('../../../utils')\r\n    const _ = require('underscore')\r\n    dispatch({\r\n        type: SET_LOADER,\r\n        payload: true\r\n    })\r\n    const headers = {\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n    }\r\n    try {\r\n        const {data:{data:{redirectUrl}}} = await request(\r\n            `${CONSTANTS.BACKEND_BASE_URL}/payment/paypalConnect/${userId}`,\r\n            'get',\r\n            headers\r\n        )\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        window.location.href = redirectUrl\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        return {success:false, message:[error.message]}\r\n    }\r\n}\r\n\r\nexport const depositAmount = (amount) => async dispatch => {\r\n    const authtoken = localStorage.getItem('authToken')\r\n    const userId = localStorage.getItem('userId')\r\n    const {getFieldValue} = require('../../../utils')\r\n    const _ = require('underscore')\r\n    dispatch({\r\n        type: SET_LOADER,\r\n        payload: true\r\n    })\r\n    const headers = {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"x-auth-token\": authtoken,\r\n        \"x-user-id\": userId\r\n    }\r\n    try {\r\n        const {data:{data:{redirectUrl}}} = await request(\r\n            `${CONSTANTS.BACKEND_BASE_URL}/payment/paypalpay?amount=${amount}`,\r\n            'get',\r\n            headers\r\n        )\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        window.location.href = redirectUrl\r\n    } catch (error) {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        console.error('error: ', error)\r\n        return {success:false, message:[error.message]}\r\n    }\r\n}\r\n\r\nexport const getAllUserPaymentMethods = () => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const UserPaymentMethodsQuery = gql`\r\n            query getAllUserPaymentMethods{\r\n                getAllUserPaymentMethods{\r\n                statusCode\r\n                success\r\n                message\r\n                nextToken\r\n                data{\r\n                    _id\r\n                    status\r\n                    paypal{\r\n                        verified\r\n                        paypalId\r\n                        paypalEmailId\r\n                    }\r\n                    createdAt\r\n                    updatedAt\r\n                }\r\n                }\r\n            }\r\n        `\r\n        const  {data} = await client.query({\r\n            query: UserPaymentMethodsQuery\r\n        })\r\n        handleAuthResponse(data.getAllUserPaymentMethods)\r\n        const {success} = data.getAllUserPaymentMethods\r\n        if (success) {\r\n            const paymentMethods = getFieldValue(data, 'getAllUserPaymentMethods.data')\r\n            dispatch({\r\n                type: SET_USERS_PAYMENT_METHODS,\r\n                payload: paymentMethods\r\n            })\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        \r\n    } catch (error) {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        console.error('error: ', error)\r\n        return {success:false, message:[error.message]}\r\n    }\r\n}\r\n\r\nexport const removeAllUserPaymentMethods = () => async dispatch => {\r\n    dispatch({\r\n        type: SET_USERS_PAYMENT_METHODS,\r\n        payload:[]\r\n    })\r\n}\r\n\r\nexport const getUserTransactions = (limit, page, searchString, isCompleted) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const UsersTransactionsQuery = gql`\r\n            query getPaginatedTransactions($limit: Int, $skip: Int, $searchString: String){\r\n                getPaginatedTransactions(limit: $limit, skip: $skip, searchString: $searchString){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data {\r\n                        totalPages\r\n                        skip\r\n                        limit\r\n                        data {\r\n                            txnId\r\n                            amount\r\n                            closingBalance\r\n                            type\r\n                            status\r\n                            transactionType\r\n                            reason\r\n                            updatedAt\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n        const  {data} = await client.query({\r\n            query: UsersTransactionsQuery,\r\n            variables: {\r\n                limit, \r\n                skip: (page * limit),\r\n                searchString,\r\n                isCompleted\r\n            }\r\n        })\r\n        handleAuthResponse(data.getPaginatedTransactions)\r\n        const {success} = data.getPaginatedTransactions\r\n        if (success) {\r\n            const transactions = getFieldValue(data, 'getPaginatedTransactions.data')\r\n            dispatch({\r\n                type: SET_USERS_TRANSACTIONS,\r\n                payload: transactions.data\r\n            })\r\n            dispatch({\r\n                type: SET_TOTAL,\r\n                payload: transactions.totalPages || 1\r\n            })\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        \r\n    } catch (error) {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        console.error('error: ', error)\r\n        return {success:false, message:[error.message]}\r\n    }\r\n}\r\n\r\nexport const getAllUserTransactions = () => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const UsersTransactionsQuery = gql`\r\n            query getPaginatedTransactions($limit: Int, $skip: Int, $searchString: String){\r\n                getPaginatedTransactions(limit: $limit, skip: $skip, searchString: $searchString){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data {\r\n                        totalPages\r\n                        skip\r\n                        limit\r\n                        data {\r\n                            txnId\r\n                            amount\r\n                            closingBalance\r\n                            type\r\n                            status\r\n                            transactionType\r\n                            reason\r\n                            updatedAt\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n        const  {data} = await client.query({\r\n            query: UsersTransactionsQuery,\r\n            variables: {\r\n                limit:null, \r\n                skip: null,\r\n                searchString: null,\r\n                isCompleted: null\r\n            }\r\n        })\r\n        handleAuthResponse(data.getPaginatedTransactions)\r\n        const {success} = data.getPaginatedTransactions\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        if (success) {\r\n            const transactions = getFieldValue(data, 'getPaginatedTransactions.data')\r\n            return transactions.data\r\n        }\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const removeUserTrasaction = () => async dispatch => {\r\n    dispatch({\r\n        type: SET_USERS_TRANSACTIONS,\r\n        payload: []\r\n    })\r\n}\r\n\r\nexport const getTransaction = (txnId) => async dispatch => {\r\n    const {SET_TRANSACTION, SET_LOADER} = require('../../types')\r\n    dispatch({\r\n        type: SET_LOADER,\r\n        payload: true\r\n    })\r\n    \r\n    try {\r\n        const TransactionQuery = gql`\r\n           query getTransactionsByTxnId($txnId: String){\r\n                getTransactionsByTxnId(txnId: $txnId){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data{\r\n                        _id\r\n                        amount\r\n                        type\r\n                        transactionType\r\n                        reason\r\n                    }\r\n                }\r\n                }\r\n        `\r\n        const  {data} = await client.query({\r\n            query: TransactionQuery,\r\n            variables: {\r\n                txnId\r\n            }\r\n        })\r\n        handleAuthResponse(data.getTransactionsByTxnId)\r\n        const {success} = data.getTransactionsByTxnId\r\n        if (success) {\r\n            const transaction = getFieldValue(data, 'getTransactionsByTxnId.data')\r\n            dispatch({\r\n                type: SET_TRANSACTION,\r\n                payload: transaction\r\n            })\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        console.error('error: ', error)\r\n        return {success:false, message:[error.message]}\r\n    }\r\n}\r\n\r\nexport const removeTransaction = () => dispatch => {\r\n    const {SET_TRANSACTION} = require('../../types')\r\n    dispatch({\r\n        type: SET_TRANSACTION,\r\n        payload: {}\r\n    })\r\n    \r\n}\r\n\r\nexport const getUserCashPosition = () => async dispatch => {\r\n    const {SET_CASH_POSITION} = require('../../types')\r\n    try {\r\n        const UserCashPositionQuery = gql`\r\n        query getCashPositionsByUserId{\r\n            getCashPositionsByUserId{\r\n                statusCode\r\n                success\r\n                message\r\n                nextToken\r\n                data{\r\n                    _id\r\n                    userId\r\n                    amount\r\n                    playingPower\r\n                    cumulativeHoldAmount\r\n                    status\r\n                    createdAt\r\n                    updatedAt\r\n                }\r\n            }\r\n        }\r\n        `\r\n        const  {data} = await client.query({\r\n            query: UserCashPositionQuery\r\n        })\r\n        handleAuthResponse(data.getCashPositionsByUserId)\r\n        const {success} = data.getCashPositionsByUserId\r\n        if (success) {\r\n            const cashPosition = getFieldValue(data, 'getCashPositionsByUserId.data')\r\n            dispatch({\r\n                type: SET_CASH_POSITION,\r\n                payload: cashPosition\r\n            })\r\n        }\r\n    } catch (error) {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        console.error('error: ', error)\r\n        return {success:false, message:[error.message]}\r\n    }\r\n}\r\n\r\nexport const removeCashPosition = () => dispatch => {\r\n    const {SET_CASH_POSITION} = require('../../types')\r\n\r\n    dispatch({\r\n        type: SET_CASH_POSITION,\r\n        payload: {}\r\n    })\r\n}\r\n\r\nexport const withdrawalAmount = (amount, paypalId) => async dispatch => {\r\n    const authtoken = localStorage.getItem('authToken')\r\n    const userId = localStorage.getItem('userId')\r\n    const {getFieldValue} = require('../../../utils')\r\n    const {CONSTANTS} = require('../../../utils/CONSTANTS')\r\n    const showToastMessage = require('../toastNotification')\r\n    const _ = require('underscore')\r\n    dispatch({\r\n        type: SET_LOADER,\r\n        payload: true\r\n    })\r\n    const headers = {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"x-auth-token\": authtoken,\r\n        \"x-user-id\": userId\r\n    }\r\n    try {\r\n        const {data} = await request(\r\n            `${CONSTANTS.BACKEND_BASE_URL}/payment/withdraw`,\r\n            'post',\r\n            headers,\r\n            {\r\n                amount,\r\n                currency: \"usd\", \r\n                paypalId\r\n            }\r\n        )\r\n        if (data.success) {\r\n            dispatch(showToastMessage(data.message, \"success\"))\r\n        } else {\r\n            dispatch(showToastMessage(data.message[0], \"error\"))\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        console.error('error: ', error)\r\n        return {success:false, message:[error.message]}\r\n    }\r\n}\r\n\r\nexport const getUserCashPositionSubscription = handleCashPosition => async dispatch => {\r\n    try {\r\n        const cashpositionSubQuery = gql`\r\n            subscription{\r\n                userCashPositionSubs{\r\n                    _id\r\n                    userId\r\n                    amount\r\n                    playingPower\r\n                    cumulativeHoldAmount\r\n                    status\r\n                    createdAt\r\n                    updatedAt\r\n                }\r\n            }\r\n        `\r\n        const observable = client.subscribe({query:  cashpositionSubQuery})\r\n        return observable.subscribe(({data}) =>  {\r\n           handleCashPosition(data.userCashPositionSubs)\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport const setUserCashPosition = data => dispatch => {\r\n    const {SET_CASH_POSITION} = require('../../types')\r\n    try {\r\n        dispatch({\r\n            type: SET_CASH_POSITION,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n    }\r\n}\r\n\r\nexport const getusersTransactionSubscription = handleTransaction => dispatch => {\r\n    const transactionSubQuery = gql`\r\n        subscription{\r\n            usersTransactionsSubs{\r\n                _id\r\n                userId\r\n                txnId\r\n                amount\r\n                closingBalance\r\n                status\r\n                type\r\n                transactionType\r\n                reason\r\n                updatedAt\r\n                createdAt\r\n            }\r\n        }\r\n    `\r\n    const observable = client.subscribe({query:  transactionSubQuery})\r\n    return observable.subscribe(({data}) =>  {\r\n        handleTransaction(data.usersTransactionsSubs)\r\n    })\r\n}\r\n\r\nexport const setTransactions = transaction => dispatch => {\r\n    const {SET_SUBS_TRANSACTION} = require('../../types')\r\n    dispatch({\r\n        type: SET_SUBS_TRANSACTION,\r\n        payload: transaction\r\n    })\r\n}","// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport classnames from 'classnames'\r\n\r\nconst Timeline = props => {\r\n  // ** Props\r\n  const { data, tag, className } = props\r\n\r\n  // ** Custom Tagg\r\n  const Tag = tag ? tag : 'ul'\r\n\r\n  return (\r\n    <Tag\r\n      className={classnames('timeline', {\r\n        [className]: className\r\n      })}\r\n    >\r\n      {data.map((item, i) => {\r\n        const ItemTag = item.tag ? item.tag : 'li'\r\n\r\n        return (\r\n          <ItemTag\r\n            key={i}\r\n            className={classnames('timeline-item', {\r\n              [item.className]: className\r\n            })}\r\n          >\r\n            <span\r\n              className={classnames('timeline-point', {\r\n                [`timeline-point-${item.color}`]: item.color,\r\n                'timeline-point-indicator': !item.icon\r\n              })}\r\n            >\r\n              {item.icon ? item.icon : null}\r\n            </span>\r\n            <div className='timeline-event'>\r\n              <div\r\n                className={classnames('d-flex justify-content-between flex-sm-row flex-column', {\r\n                  'mb-sm-0 mb-1': item.meta\r\n                })}\r\n              >\r\n                <h6>{item.title}</h6>\r\n                {item.meta ? (\r\n                  <span\r\n                    className={classnames('timeline-event-time', {\r\n                      [item.metaClassName]: item.metaClassName\r\n                    })}\r\n                  >\r\n                    {item.meta}\r\n                  </span>\r\n                ) : null}\r\n              </div>\r\n              <p\r\n                className={classnames({\r\n                  'mb-0': i === data.length - 1 && !item.customContent\r\n                })}\r\n              >\r\n                {item.content}\r\n              </p>\r\n              {item.customContent ? item.customContent : null}\r\n            </div>\r\n          </ItemTag>\r\n        )\r\n      })}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport default Timeline\r\n\r\n// ** PropTypes\r\nTimeline.propTypes = {\r\n  data: Proptypes.array.isRequired,\r\n  className: Proptypes.string,\r\n  tag: Proptypes.string\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport Timeline from '@components/timeline'\r\nimport { Aperture, BookOpen, HelpCircle, PenTool, Shield, User } from 'react-feather'\r\nimport { Card, CardHeader, CardTitle, CardBody } from 'reactstrap'\r\nimport UncontrolledTooltip from 'reactstrap/lib/UncontrolledTooltip'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { getUserActivities } from '../../../redux/actions/dashboard'\r\nimport moment from 'moment'\r\n\r\nconst UserTimeline = () => {\r\n  const dispatch = useDispatch()\r\n  const {userActivities} = useSelector(state => state.dashboard)\r\n  const [activities, setActivities] = useState([])\r\n\r\n  useEffect(() => {\r\n    dispatch(getUserActivities())\r\n    return () => {\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setActivities(userActivities)\r\n  }, [userActivities])\r\n\r\n  return (\r\n    <Card className='card-user-timeline' id=\"myTimeline\">\r\n      <CardHeader>\r\n        <div className='d-flex align-items-center'>\r\n          <BookOpen className='user-timeline-title-icon' />\r\n          <CardTitle tag='h4'>User Timeline</CardTitle>\r\n        </div>\r\n        <HelpCircle size={18} id=\"userActivityHelp\" className='text-muted cursor-pointer' />\r\n        <UncontrolledTooltip placement='auto' target='userActivityHelp'>\r\n          User's Activity\r\n        </UncontrolledTooltip>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Timeline className='ml-50 mb-0' data={activities?.map(activity => {\r\n          return {\r\n            title: activity?.title,\r\n            content: activity?.message,\r\n            icon: activity?.title.includes(\"Profile\") ? <PenTool size={14} /> : activity?.title.includes(\"Challenge\") ? <User size={14} /> : <Shield size={14} />,\r\n            meta: moment(new Date(parseInt(activity?.createdAt))).fromNow(),\r\n            metaClassName: 'mr-1',\r\n            color: activity?.color\r\n          }\r\n        }) || []} />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default UserTimeline\r\n","import { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport Chart from 'react-apexcharts'\r\nimport { HelpCircle } from 'react-feather'\r\nimport { Card, CardHeader, CardTitle, CardBody, CardText, Row, Col } from 'reactstrap'\r\nimport UncontrolledTooltip from 'reactstrap/lib/UncontrolledTooltip'\r\nimport { FormattedMessage } from 'react-intl'\r\n\r\nconst ChallangeOverview = props => {\r\n  const {success, data: details} = props\r\n  const {wins = 0, loss = 0, lastMatches = [], totalChallenges = 0, totalPlayers = 0, points = 0, position = 0} = details\r\n  const [data, setData] = useState({\r\n    completed: 0,\r\n    inProgress: 0\r\n})\r\n\r\n  useEffect(() => {\r\n    setData({\r\n      completed: totalChallenges,\r\n      inProgress: wins\r\n  })\r\n  }, [details])\r\n\r\n  const challengePercentage = parseFloat((parseInt(wins) * 100) / parseInt(totalChallenges)).toFixed(2)\r\n\r\n  const options = {\r\n      chart: {\r\n        sparkline: {\r\n          enabled: true\r\n        },\r\n        dropShadow: {\r\n          enabled: true,\r\n          blur: 3,\r\n          left: 1,\r\n          top: 1,\r\n          opacity: 0.1\r\n        }\r\n      },\r\n      colors: ['#51e5a8'],\r\n      plotOptions: {\r\n        radialBar: {\r\n          offsetY: 10,\r\n          startAngle: -150,\r\n          endAngle: 150,\r\n          hollow: {\r\n            size: '77%'\r\n          },\r\n          track: {\r\n            background: '#ebe9f1',\r\n            strokeWidth: '50%'\r\n          },\r\n          dataLabels: {\r\n            name: {\r\n              show: false\r\n            },\r\n            value: {\r\n              color: '#5e5873',\r\n              fontFamily: 'Montserrat',\r\n              fontSize: '2.86rem',\r\n              fontWeight: '600'\r\n            }\r\n          }\r\n        }\r\n      },\r\n      fill: {\r\n        type: 'gradient',\r\n        gradient: {\r\n          shade: 'dark',\r\n          type: 'horizontal',\r\n          shadeIntensity: 0.5,\r\n          gradientToColors: [success],\r\n          inverseColors: true,\r\n          opacityFrom: 1,\r\n          opacityTo: 1,\r\n          stops: [0, 100]\r\n        }\r\n      },\r\n      stroke: {\r\n        lineCap: 'round'\r\n      },\r\n      grid: {\r\n        padding: {\r\n          bottom: 30\r\n        }\r\n      }\r\n    },\r\n    series = [isNaN(challengePercentage) ? 0 : challengePercentage]\r\n\r\n  return (\r\n    <Card className=\"overview\">\r\n      <CardHeader>\r\n        <CardTitle tag='h4'><FormattedMessage id=\"Challenge Win Overview\" /></CardTitle>\r\n        <HelpCircle size={18} id=\"challangeHelp\" className='text-muted cursor-pointer' />\r\n        <UncontrolledTooltip placement='auto' target='challangeHelp'>\r\n          Challange information and win percentage of user with loss being calculated based on loss and draw.\r\n        </UncontrolledTooltip>\r\n      </CardHeader>\r\n      <CardBody className='p-0'>\r\n        <Chart options={options} series={series} type='radialBar' height={245} />\r\n      </CardBody>\r\n      {parseInt(position) ? <Row className='border-top text-center mx-0'>\r\n        <Col xs='12' className='border-right py-1'>\r\n          <CardText className='text-muted mb-0'>Rank</CardText>\r\n          <h3 className='font-weight-bolder mb-0'>{position} of {totalPlayers} players</h3>\r\n        </Col>\r\n      </Row> : <></>}\r\n      <Row className='border-top text-center mx-0'>\r\n        <Col xs='6' className='border-right py-1'>\r\n          <CardText className='text-muted mb-0'>Win</CardText>\r\n          <h3 className='font-weight-bolder mb-0'>{wins}</h3>\r\n        </Col>\r\n        <Col xs='6' className='py-1'>\r\n          <CardText className='text-muted mb-0'>Loss</CardText>\r\n          <h3 className='font-weight-bolder mb-0'>{(totalChallenges - wins)}</h3>\r\n        </Col>\r\n      </Row>\r\n    </Card>\r\n  )\r\n}\r\nexport default ChallangeOverview\r\n","import { useEffect, useState } from 'react'\r\nimport { Card, CardBody, CardHeader, CardTitle, UncontrolledTooltip } from 'reactstrap'\r\nimport { HelpCircle } from 'react-feather'\r\nimport \"./wincards.scss\"\r\nconst WinsCards = ({ info, data: details }) => {\r\n  const [data, setData] = useState({})\r\n  //   const [data, setData] = useState({\r\n  //     title: \"Wins\",\r\n  //     statistics: \"786\",\r\n  //     series: [\r\n  //         {\r\n  //           data: [\r\n  //                 0,\r\n  //                 20,\r\n  //                 5,\r\n  //                 30,\r\n  //                 15,\r\n  //                 45\r\n  //             ]\r\n  //         }\r\n  //     ]\r\n  // })\r\n\r\n  useEffect(() => {\r\n    if (details) {\r\n      setData(details)\r\n    }\r\n    //   setData({\r\n    //     title: \"Wins\",\r\n    //     statistics: \"786\",\r\n    //     series: [\r\n    //         {\r\n    //           data: [\r\n    //                 0,\r\n    //                 20,\r\n    //                 5,\r\n    //                 30,\r\n    //                 15,\r\n    //                 45\r\n    //             ]\r\n    //         }\r\n    //     ]\r\n    // })\r\n  }, [details])\r\n\r\n  // const options = {\r\n  //   chart: {\r\n  //     toolbar: {\r\n  //       show: false\r\n  //     },\r\n  //     zoom: {\r\n  //       enabled: false\r\n  //     }\r\n  //   },\r\n  //   grid: {\r\n  //     borderColor: '#EBEBEB',\r\n  //     strokeDashArray: 5,\r\n  //     xaxis: {\r\n  //       lines: {\r\n  //         show: true\r\n  //       }\r\n  //     },\r\n  //     yaxis: {\r\n  //       lines: {\r\n  //         show: false\r\n  //       }\r\n  //     },\r\n  //     padding: {\r\n  //       top: -30,\r\n  //       bottom: -10\r\n  //     }\r\n  //   },\r\n  //   stroke: {\r\n  //     width: 3\r\n  //   },\r\n  //   colors: [info],\r\n  //   series: [\r\n  //     {\r\n  //       data: [0, 20, 5, 30, 15, 45]\r\n  //     }\r\n  //   ],\r\n  //   markers: {\r\n  //     size: 2,\r\n  //     colors: info,\r\n  //     strokeColors: info,\r\n  //     strokeWidth: 2,\r\n  //     strokeOpacity: 1,\r\n  //     strokeDashArray: 0,\r\n  //     fillOpacity: 1,\r\n  //     discrete: [\r\n  //       {\r\n  //         seriesIndex: 0,\r\n  //         dataPointIndex: 5,\r\n  //         fillColor: '#ffffff',\r\n  //         strokeColor: info,\r\n  //         size: 5\r\n  //       }\r\n  //     ],\r\n  //     shape: 'circle',\r\n  //     radius: 2,\r\n  //     hover: {\r\n  //       size: 3\r\n  //     }\r\n  //   },\r\n  //   xaxis: {\r\n  //     labels: {\r\n  //       show: true,\r\n  //       style: {\r\n  //         fontSize: '0px'\r\n  //       }\r\n  //     },\r\n  //     axisBorder: {\r\n  //       show: false\r\n  //     },\r\n  //     axisTicks: {\r\n  //       show: false\r\n  //     }\r\n  //   },\r\n  //   yaxis: {\r\n  //     show: false\r\n  //   },\r\n  //   tooltip: {\r\n  //     x: {\r\n  //       show: false\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  const tooltip = \"Number of challanges wins by user\"\r\n  return Object.keys(data).length ? (\r\n    // <TinyChartStats\r\n    //   height={70}\r\n    //   type='line'\r\n    //   className=\"overview\"\r\n    //   options={options}\r\n    //   title={data.title}\r\n    //   stats={data.statistics}\r\n    //   series={data.series}\r\n    //   tooltip=\"Number of challanges wins by user\"\r\n    // />\r\n    <Card className=\"overview\">\r\n      <CardHeader>\r\n        <CardTitle tag=\"h4\">Last 5 Matches</CardTitle>\r\n        {tooltip && (\r\n          <>\r\n            <HelpCircle\r\n              size={18}\r\n              id=\"tinyChartStatsHelp\"\r\n              className=\"text-muted cursor-pointer\"\r\n            />\r\n            <UncontrolledTooltip placement=\"auto\" target=\"tinyChartStatsHelp\">\r\n              {tooltip}\r\n            </UncontrolledTooltip>\r\n          </>\r\n        )}\r\n      </CardHeader>\r\n      <CardBody className=\"pb-50\">\r\n      <div id='table_matches'>\r\n                  <table>\r\n          {data?.lastMatches?.map((match) => {\r\n            const { challengerName = \"\", winLoseScore = \"\", opponentName = \"\" } = match\r\n            return (\r\n              <>  \r\n                    <tr>\r\n                      <td><small>{challengerName}</small></td>\r\n                      <td><small>{winLoseScore}</small></td>\r\n                      <td><small>{opponentName}</small></td> \r\n                    </tr>\r\n                \r\n\r\n                {/* <tr style={{ borderBottom: \"1px solid black\", borderTop: \"1px solid black\" }}>\r\n                  <td>\r\n                    <small>{challengerName}</small>\r\n                  </td>\r\n                  <td className='text-center' style={{ padding: \"0 10px 0 10px\" }}>\r\n                    <small>{winLoseScore}</small>\r\n                  </td>\r\n                  <td>\r\n                    <small>{opponentName}</small>\r\n                  </td>\r\n                </tr> */}\r\n              </>\r\n            )\r\n          }) || null}\r\n         \r\n         </table>\r\n                </div>\r\n        {/* <Chart options={options} series={series} type={type} height={height} /> */}\r\n      </CardBody>\r\n    </Card>\r\n  ) : null\r\n}\r\n\r\nexport default WinsCards\r\n","// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport Chart from 'react-apexcharts'\r\nimport { Card, CardBody, CardHeader, CardTitle, UncontrolledTooltip } from 'reactstrap'\r\nimport classnames from 'classnames'\r\nimport { HelpCircle } from 'react-feather'\r\n\r\nconst TinyChartStats = props => {\r\n  // ** Props\r\n  const { title, stats, options, series, type, height, className, tooltip } = props\r\n  const cardClasses = `card-tiny-line-stats ${className}`\r\n  return (\r\n    <Card className={cardClasses}>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>{title}</CardTitle>\r\n        {tooltip && \r\n          <>\r\n            <HelpCircle size={18} id=\"tinyChartStatsHelp\" className='text-muted cursor-pointer' />\r\n            <UncontrolledTooltip placement='auto' target='tinyChartStatsHelp'>\r\n              {tooltip}\r\n            </UncontrolledTooltip>\r\n          </>\r\n        }\r\n      </CardHeader>\r\n      <CardBody className='pb-50'>\r\n        <h6>{title}</h6>\r\n        <h2 className='font-weight-bolder mb-1'>{stats}</h2>\r\n        <Chart options={options} series={series} type={type} height={height} />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default TinyChartStats\r\n\r\n// ** PropTypes\r\nTinyChartStats.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  stats: PropTypes.string.isRequired,\r\n  options: PropTypes.object.isRequired,\r\n  series: PropTypes.array.isRequired,\r\n  type: PropTypes.string.isRequired\r\n}\r\n\r\n// ** Default Props\r\nTinyChartStats.defaultProps = {\r\n  height: 100\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport TinyChartStats from '@components/widgets/stats/TinyChartStats'\r\n\r\nconst ChallangesCard = ({ warning, data: details }) => {\r\n  const [data, setData] = useState({\r\n    title: \"E-FOOT Coins\",\r\n    statistics: 0,\r\n    series: [\r\n      {\r\n        name: \"E-FOOT Coins\",\r\n        data: [0, 0, 0]\r\n      }\r\n    ]\r\n  })\r\n  \r\n  useEffect(() => {\r\n    const {wins = 0, loss = 0, lastMatches = [], totalChallenges = 0, totalPlayers = 0, points = 0, position = 0} = details\r\n    setData({\r\n      title: \"E-FOOT Coins\",\r\n      statistics: points || 0,\r\n      series: [\r\n          {\r\n              name: \"E-FOOT Coins\",\r\n              data: [\r\n                {\r\n                  x: 'Coins',\r\n                  y: [0, points]\r\n                },\r\n                {\r\n                  x: 'wins',\r\n                  y: [wins]\r\n                },\r\n                {\r\n                  x: 'loss',\r\n                  y: [loss]\r\n                }\r\n              ]\r\n          }\r\n      ]\r\n  })\r\n  }, [details])\r\n\r\n  const options = {\r\n    chart: {\r\n      stacked: true,\r\n      toolbar: {\r\n        show: false\r\n      }\r\n    },\r\n    grid: {\r\n      show: false,\r\n      padding: {\r\n        left: 0,\r\n        right: 0,\r\n        top: -30,\r\n        bottom: -14\r\n      }\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        horizontal: false,\r\n        columnWidth: '15%',\r\n        startingShape: 'rounded',\r\n        colors: {\r\n          backgroundBarColors: ['#c1c1c1', '#c1c1c1', '#c1c1c1'],\r\n          backgroundBarRadius: 1\r\n        }\r\n      }\r\n    },\r\n    legend: {\r\n      show: false\r\n    },\r\n    dataLabels: {\r\n      enabled: false\r\n    },\r\n    colors: [warning],\r\n    xaxis: {\r\n      labels: {\r\n        show: true\r\n      },\r\n      axisBorder: {\r\n        show: false\r\n      },\r\n      axisTicks: {\r\n        show: false\r\n      }\r\n    },\r\n    yaxis: {\r\n      show: false\r\n    },\r\n    tooltip: {\r\n      x: {\r\n        show: false\r\n      }\r\n    }\r\n  }\r\n\r\n  return data !== null ? (\r\n    <TinyChartStats\r\n      height={70}\r\n      type='bar'\r\n      options={options}\r\n      title={data.title}\r\n      stats={data.statistics.toString()}\r\n      series={data.series}\r\n      tooltip=\"E-Foot coins based on win/loss Challenges\"\r\n    />\r\n  ) : null\r\n}\r\n\r\nexport default ChallangesCard\r\n","import Avatar from '@components/avatar'\r\nimport * as Icon from 'react-feather'\r\nimport { Card, CardHeader, CardTitle, CardBody, Media } from 'reactstrap'\r\nimport UncontrolledTooltip from 'reactstrap/lib/UncontrolledTooltip'\r\nimport {getUserTransactions, removeUserTrasaction} from '@src/redux/actions/wallet'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useEffect } from 'react'\r\nimport {CONSTANTS} from '@src/utils/CONSTANTS'\r\n\r\nconst CardTransactions = () => {\r\n  const {userTransactions} = useSelector(state => state.wallet)\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    dispatch(getUserTransactions(5, 0, \"\", true))\r\n    return () => {\r\n      removeUserTrasaction()\r\n    }\r\n  }, [])\r\n\r\n  const renderTransactions = () => {\r\n    return userTransactions.length > 0 ? userTransactions.map((item, index) => {\r\n      const color = item.type === CONSTANTS.TRANSACTION_TYPE.WITHDRAW ? \"light-danger\" : \"light-primary\"\r\n      const icon = item.type === CONSTANTS.TRANSACTION_TYPE.WITHDRAW ? <Icon.ArrowUpLeft size={18} /> : <Icon.ArrowDownRight size={18} />\r\n      return (\r\n        <div key={`${item.title}-${index}`} className='transaction-item cursor-pointer'>\r\n          <Media>\r\n            <Avatar className='rounded' color={color} icon={icon} />\r\n            <Media body>\r\n              <h6 className='transaction-title text-capitalize'>{item.transactionType}</h6>\r\n              <small>{item.reason}</small>\r\n            </Media>\r\n          </Media>\r\n          <div className={`font-weight-bolder ${item.type === CONSTANTS.TRANSACTION_TYPE.WITHDRAW ? 'text-danger' : 'text-success'}`}>\r\n            {item.type === CONSTANTS.TRANSACTION_TYPE.WITHDRAW ? '-' : ''} {' '}\r\n            ${item.amount}\r\n          </div>\r\n        </div>\r\n      )\r\n    }) : null\r\n  }\r\n\r\n  return (\r\n    <Card className='card-transaction'>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Transactions</CardTitle>\r\n        <Icon.HelpCircle size={18} id=\"onlineUsersTransaction\" className='text-muted cursor-pointer' />\r\n        <UncontrolledTooltip placement='auto' target='onlineUsersTransaction'>\r\n          This will show transaction detials of user\r\n        </UncontrolledTooltip>\r\n      </CardHeader>\r\n      <CardBody>{renderTransactions()}</CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CardTransactions\r\n","import { useContext, useEffect, useState } from 'react'\r\nimport { ThemeColors } from '@src/utility/context/ThemeColors'\r\nimport { Row, Col } from 'reactstrap'\r\nimport { FormattedMessage } from 'react-intl'\r\n\r\nimport '@styles/react/libs/charts/apex-charts.scss'\r\nimport LoaderComponent from '../components/Loader'\r\nimport OnlineUsers from './components/OnlineUsers'\r\nimport CardUserTimeline from './components/CardUserTimeline'\r\nimport ChallangeOverview from './components/ChallangeOverview'\r\nimport WinsCards from './components/WinsCards'\r\nimport ChallangesCard from './components/ChallangesCard'\r\nimport Breadcrumbs from '@components/breadcrumbs'\r\nimport { connect, useSelector, useDispatch } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport CardTransactions from './components/CardTransactions'\r\nimport { getDashboardDetails, setDashboardUserId } from '../../redux/actions/dashboard'\r\nimport Button from 'reactstrap/lib/Button'\r\n\r\n\r\nconst Dashboard = ({loading}) => {\r\n  const dispatch = useDispatch()\r\n  const {dashboardUserId, userDashboardDetails} = useSelector(state => state.dashboard)\r\n  const {user: {_id: currentLoggedInUser = \"\"} = \"\"} = useSelector(state => state.auth)\r\n  const [details, setDetails] = useState({})\r\n  const [userId, setUserId] = useState({})\r\n  const [loggedInUser, setLoggedInUser] = useState(true)\r\n\r\n  useEffect(() => {\r\n    dispatch(getDashboardDetails(dashboardUserId))\r\n    setLoggedInUser(userId === currentLoggedInUser)\r\n  }, [userId])\r\n\r\n  useEffect(() => {\r\n    setUserId(dashboardUserId)\r\n  }, [dashboardUserId])\r\n\r\n  useEffect(() => {\r\n    setLoggedInUser(dashboardUserId === currentLoggedInUser)\r\n  }, [dashboardUserId, currentLoggedInUser])\r\n  \r\n  useEffect(() => {\r\n    if (dashboardUserId) {\r\n      dispatch(getDashboardDetails(dashboardUserId))\r\n    } else {\r\n      if (dashboardUserId === null) {\r\n        dispatch(setDashboardUserId(currentLoggedInUser))\r\n      }\r\n    }\r\n    return () => {\r\n      dispatch(setDashboardUserId(currentLoggedInUser))\r\n      setLoggedInUser(true)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(userDashboardDetails).length) {\r\n      setDetails(userDashboardDetails)\r\n    }\r\n    return () => {\r\n    }\r\n  }, [userDashboardDetails])\r\n\r\n  const handleClick = () => {\r\n    dispatch(setDashboardUserId(currentLoggedInUser))\r\n    setLoggedInUser(true)\r\n  }\r\n\r\n  const { colors } = useContext(ThemeColors),\r\n    trackBgColor = '#e9ecef'\r\n  return (\r\n    <div id='dashboard-analytics'>\r\n      <LoaderComponent loading={loading} />\r\n      <Breadcrumbs breadCrumbTitle='Dashboard' />\r\n      {!loggedInUser ? (<Button className=\"btn btn-sm btn-warning mb-1\" onClick={handleClick}>My Board</Button>) : <></>}\r\n      <Row className='match-height'>\r\n        <Col lg={loggedInUser ? 9 : 12} md={loggedInUser ? 8 : 12} >\r\n          <Row>\r\n            <Col md={12}>\r\n              <Row className='card-margin'>\r\n                <Col lg={5} md=\"4\" sm=\"12\">\r\n                  <Row>\r\n                    <Col lg='12' md='12' sm='12' xs='12'>\r\n                      <ChallangesCard data={details} warning={colors.warning.main} />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col lg='12' md='12' sm='12' xs='12'>\r\n                      <WinsCards data={details} info={colors.primary.main} />\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n                \r\n                <Col lg='7' md='8' sm='12'>\r\n                  <ChallangeOverview data={details} success={colors.primary.main} />\r\n                </Col>\r\n\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n        {loggedInUser ? <Col lg='3' md='4' sm='12'>\r\n          <OnlineUsers showheader={true} colors={colors} trackBgColor={trackBgColor} />\r\n        </Col> : <></>}\r\n      </Row>\r\n      {loggedInUser ? <Row className='match-height'>\r\n            <Col lg='8' md='8' sm='12' xs='12'>\r\n              <CardUserTimeline />\r\n            </Col>\r\n            <Col lg='4' md='4' sm='12' xs='12'>\r\n              <CardTransactions />\r\n            </Col>\r\n      </Row> : <></>}\r\n    </div>\r\n  )\r\n}\r\n\r\nDashboard.propTypes = {\r\n  loading: PropTypes.bool.isRequired\r\n}\r\nconst mapStateToProps = state => ({\r\n    loading: state.auth.loading\r\n})\r\nexport default connect(mapStateToProps, {})(Dashboard)\r\n"],"sourceRoot":""}