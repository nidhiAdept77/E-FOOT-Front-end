{"version":3,"sources":["@core/components/breadcrumbs/index.js","redux/actions/challenges/index.js","redux/actions/consoles/index.js","redux/actions/games/index.js","@core/components/wizard/index.js","views/Challenge/steps/ChallengeRules.js","views/Challenge/steps/ChooseGameConsole.js","views/Challenge/steps/ChooseChallengeType.js","views/Challenge/ChallegeForm.js","views/Challenge/index.js"],"names":["BreadCrumbs","props","breadCrumbTitle","breadCrumbParent","breadCrumbParent2","breadCrumbParent3","breadCrumbActive","className","tag","to","active","createUpdateChallenge","type","status","gameId","consoleId","mode","acceptor","dispatch","SET_LOADER","payload","createUpdateChallengeMutation","gql","client","mutate","mutation","variables","input","data","handleAuthResponse","success","_id","showToastMessage","UPDATE_CHALLENGES","message","console","error","acceptChallenge","opponent","acceptChallengeMutation","challengeAccept","getPaginatedChallenges","limit","page","searchString","userId","ChallengeQuery","query","skip","getChallenges","challenges","getFieldValue","_","isEmpty","SET_CHALLENGES","SET_TOTAL","removeChallenges","updateScore","scorces","updateScoresMutation","updateScores","uploadProof","imageData","authtoken","localStorage","getItem","require","CONSTANTS","headers","formData","FormData","append","request","BACKEND_BASE_URL","result","challengeData","resolveChallengeDispute","challengerStatus","opponentStatus","challenger","resolveChallengeDisputeMutation","subsChallenges","handleChallenges","ChallengesSubscription","subscribe","challengesSubs","updateChallenges","challenge","SET_CONSOLES","SET_UPDATED_CONSOLE","REMOVE_DELETED_CONSOLE","getConsolesPaginated","ConsolesQuery","getPaginatedConsoles","rooms","removePaginatedConsoles","createUpdateConsoles","name","currentObj","isUpdate","consoleData","getConsoles","consoles","deleteConsoles","SET_GAMES","SET_UPDATED_GAMES","REMOVE_DELETED_GAMES","getGamesPaginated","GamesQuery","getPaginatedGames","games","getGamesByConsoleId","removePaginatedGames","createUpdateGames","forEach","gameData","deleteGames","Wizard","forwardRef","ref","steps","separator","options","instance","useState","activeIndex","setActiveIndex","stepper","useEffect","Stepper","current","addEventListener","event","detail","indexStep","classnames","map","step","index","length","crossed","id","icon","title","subtitle","content","defaultProps","size","ChallengeRules","Button","Ripple","color","onClick","outline","disabled","next","ChooseGameConsole","useDispatch","useSelector","state","selectedConsole","setSelectedConsole","selectedGame","setSelectedGame","addEditPopupData","layout","useForm","register","errors","handleSubmit","trigger","value","Form","onSubmit","opponentId","opponentUserName","userName","profileImage","game","label","setAddEditPopupData","isObjEmpty","Row","FormGroup","Col","md","Label","for","theme","selectThemeColors","isClearable","classNamePrefix","onChange","defaultValue","innerRef","required","previous","ChooseChallengeType","challengeType","selectedChallengeType","setSelectedChallengeType","history","useHistory","Card","acceptorPic","sm","img","imgHeight","imgWidth","acceptorUserName","dataToSend","STATUS","PUBLIC","ACTIVE","PRIVATE","PENDING","push","ChallengeForm","setStepper","useRef","el","createChallenge"],"mappings":"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","file":"static/js/35.97a8239e.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  UncontrolledButtonDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? <h2 className='content-header-title float-left mb-0'>{breadCrumbTitle}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/dashboard'>Dashboard</Link>\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent && <BreadcrumbItem tag='li' className='text-primary'>\r\n                  {breadCrumbParent}\r\n                </BreadcrumbItem>}\r\n                {breadCrumbParent2 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbParent3 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbActive && (\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>) }\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string\r\n}\r\n","import gql from 'graphql-tag'\r\nimport _ from 'underscore'\r\nimport client from '../../../graphql/client'\r\nimport { getFieldValue, handleAuthResponse } from '../../../utils'\r\nimport { SET_LOADER, SET_CHALLENGES, SET_TOTAL, UPDATE_CHALLENGES, REMOVE_CHALLENGES } from '../../types'\r\nimport { showToastMessage } from '../toastNotification'\r\nimport {request} from '../../../utils/apiService'\r\n\r\nexport const createUpdateChallenge = ({type, status, gameId, consoleId, mode, acceptor}) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const createUpdateChallengeMutation = gql`\r\n            mutation createUpdateChallenge($input: ChallengeInput){\r\n                createUpdateChallenge(input: $input){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data {\r\n                        _id\r\n                        status\r\n                        type\r\n                        consoleId\r\n                        gameId\r\n                        challenger\r\n                        acceptor\r\n                        createdAt\r\n                        gameImage\r\n                        gameName\r\n                        consoleName\r\n                        challengerName\r\n                        acceptorName\r\n                        challengerScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        opponentScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        mode {\r\n                            name\r\n                            id\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n        const {data} = await client.mutate({\r\n            mutation: createUpdateChallengeMutation,\r\n            variables: {\r\n                input: {\r\n                    status,\r\n                    gameId,\r\n                    consoleId,\r\n                    type,\r\n                    mode,\r\n                    acceptor\r\n                }\r\n            }\r\n        })\r\n        handleAuthResponse(data.createUpdateChallenge)\r\n        const {success} = data.createUpdateChallenge\r\n        if (success) {\r\n            dispatch({\r\n                type: SET_LOADER,\r\n                payload: false\r\n            })\r\n            if (data.createUpdateChallenge.data._id) {\r\n                dispatch(showToastMessage(\"Challenge created!\", 'success'))\r\n                dispatch({\r\n                    type: UPDATE_CHALLENGES,\r\n                    payload: data.createUpdateChallenge.data\r\n                })\r\n            }\r\n            return data.createUpdateChallenge\r\n        } else {\r\n            dispatch(showToastMessage(data.createUpdateChallenge.message, 'error'))\r\n        }\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const acceptChallenge = ({status, opponent, _id}) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const acceptChallengeMutation = gql`\r\n            mutation challengeAccept($input: ChallengeAcceptInput){\r\n                challengeAccept(input: $input){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data {\r\n                        _id\r\n                        status\r\n                        type\r\n                        consoleId\r\n                        gameId\r\n                        challenger\r\n                        acceptor\r\n                        createdAt\r\n                        gameImage\r\n                        gameName\r\n                        consoleName\r\n                        challengerName\r\n                        acceptorName\r\n                        challengerScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        opponentScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        mode {\r\n                            name\r\n                            id\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n        const {data} = await client.mutate({\r\n            mutation: acceptChallengeMutation,\r\n            variables: {\r\n                input: {\r\n                    status,\r\n                    acceptor: opponent,\r\n                    _id\r\n                }\r\n            }\r\n        })\r\n        handleAuthResponse(data.challengeAccept)\r\n        const {success} = data.challengeAccept\r\n        if (success) {\r\n            dispatch({\r\n                type: SET_LOADER,\r\n                payload: false\r\n            })\r\n            if (data.challengeAccept.data._id) {\r\n                dispatch(showToastMessage(\"Challenge accepted!\", 'success'))\r\n                dispatch({\r\n                    type: UPDATE_CHALLENGES,\r\n                    payload: data.challengeAccept.data\r\n                })\r\n            }\r\n            return data.challengeAccept\r\n        } else {\r\n            dispatch(showToastMessage(data.challengeAccept.message, 'error'))\r\n        }\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const getPaginatedChallenges = (limit = -1, page = 0, searchString = \"\", type = \"public\", status, userId) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const ChallengeQuery = gql`\r\n        query getChallenges($limit:Int, $skip: Int, $searchString: String, $type: String, $status: String, $userId: String) {\r\n            getChallenges(limit: $limit, skip: $skip, searchString: $searchString, type: $type, status: $status, userId: $userId) {\r\n              statusCode\r\n              success\r\n              message\r\n              nextToken\r\n              data {\r\n                totalPages\r\n                skip\r\n                limit\r\n                  data {\r\n                  _id\r\n                  status\r\n                  type\r\n                  consoleId\r\n                  gameId\r\n                  challenger\r\n                  acceptor\r\n                  createdAt\r\n                  gameImage\r\n                  gameName\r\n                  consoleName\r\n                  challengerName\r\n                  acceptorName\r\n                  challengerScore {\r\n                    my\r\n                    opponent\r\n                    status\r\n                    proof\r\n                  }\r\n                  opponentScore {\r\n                    my\r\n                    opponent\r\n                    status\r\n                    proof\r\n                  }\r\n                  mode {\r\n                      name\r\n                      id\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }`\r\n        const { data } = await client.query({\r\n          query: ChallengeQuery,\r\n          variables: {\r\n            limit,\r\n            skip: page * limit,\r\n            searchString,\r\n            type,\r\n            status,\r\n            userId\r\n          }\r\n        })\r\n        handleAuthResponse(data.getChallenges)\r\n        const {success} = data.getChallenges\r\n        if (success) {\r\n            const challenges = getFieldValue(data, 'getChallenges.data.data')\r\n            if (!_.isEmpty(challenges)) {\r\n                dispatch({\r\n                    type: SET_CHALLENGES,\r\n                    payload: challenges\r\n                })\r\n                dispatch({\r\n                    type: SET_TOTAL,\r\n                    payload: getFieldValue(data, 'getChallenges.data.totalPages')\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: SET_CHALLENGES,\r\n                    payload: []\r\n                })\r\n                dispatch({\r\n                    type: SET_TOTAL,\r\n                    payload: 0\r\n                })\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_CHALLENGES,\r\n            payload: []\r\n        })\r\n        dispatch({\r\n            type: SET_TOTAL,\r\n            payload: 0\r\n        })\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const removeChallenges = () => dispatch => {\r\n    dispatch({\r\n        type: SET_CHALLENGES,\r\n        payload: []\r\n    })\r\n}\r\n\r\nexport const updateScore = (_id, scorces) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const updateScoresMutation = gql`\r\n            mutation updateScores($input: ChallengeScoreInput){\r\n                updateScores(input: $input){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data {\r\n                        _id\r\n                        status\r\n                        type\r\n                        consoleId\r\n                        gameId\r\n                        challenger\r\n                        acceptor\r\n                        createdAt\r\n                        gameImage\r\n                        gameName\r\n                        consoleName\r\n                        challengerName\r\n                        acceptorName\r\n                        challengerScore {\r\n                          my\r\n                          opponent\r\n                          status\r\n                          proof\r\n                        }\r\n                        opponentScore {\r\n                          my\r\n                          opponent\r\n                          status\r\n                          proof\r\n                        }\r\n                        mode {\r\n                            name\r\n                            id\r\n                        }\r\n                      }\r\n                }\r\n            }\r\n        `\r\n        const {data} = await client.mutate({\r\n            mutation: updateScoresMutation,\r\n            variables: {\r\n                input: {...scorces, _id}\r\n            }\r\n        })\r\n        handleAuthResponse(data.updateScores)\r\n        const {success} = data.updateScores\r\n        if (success) {\r\n            dispatch({\r\n                type: SET_LOADER,\r\n                payload: false\r\n            })\r\n            if (data.updateScores.data._id) {\r\n                dispatch(showToastMessage(\"Score submitted!\", 'success'))\r\n                dispatch({\r\n                    type: UPDATE_CHALLENGES,\r\n                    payload: data.updateScores.data\r\n                })\r\n            }\r\n            return data.updateScores\r\n        } else {\r\n            dispatch(showToastMessage(data.updateScores.message, 'error'))\r\n        }\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const uploadProof = ({imageData, _id}) => async dispatch => {\r\n    const authtoken = localStorage.getItem('authToken')\r\n    const userId = localStorage.getItem('userId')\r\n    const {getFieldValue} = require('../../../utils')\r\n    const _ = require('underscore')\r\n    const {CONSTANTS} = require('../../../utils/CONSTANTS')\r\n\r\n\r\n    const headers = {\r\n        \"x-auth-token\": authtoken,\r\n        \"x-user-id\": userId\r\n    }\r\n    const formData = new FormData()\r\n    formData.append('document', imageData)\r\n    formData.append('id', _id)\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const result = await request(\r\n            `${CONSTANTS.BACKEND_BASE_URL}/dispute`,\r\n            'post',\r\n            headers,\r\n            formData\r\n        )\r\n        const challengeData = getFieldValue(result, 'data.challenge')\r\n        if (!_.isEmpty(challengeData)) {\r\n            handleAuthResponse(result.data)\r\n            if (!_.isEmpty(challengeData)) {\r\n                dispatch({\r\n                    type: UPDATE_CHALLENGES,\r\n                    payload: challengeData\r\n                })\r\n                showToastMessage(\"Proof Submitted\")\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        return result.data\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        return {success:false, message:[error.message]}\r\n    }\r\n}\r\n\r\nexport const resolveChallengeDispute = ({\r\n    _id,\r\n    challengerStatus,\r\n    opponentStatus,\r\n    status,\r\n    challenger,\r\n    acceptor\r\n}) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const resolveChallengeDisputeMutation = gql`\r\n            mutation resolveChallengeDispute($input: ResolveInput){\r\n                resolveChallengeDispute(input: $input){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data {\r\n                        _id\r\n                        status\r\n                        type\r\n                        consoleId\r\n                        gameId\r\n                        challenger\r\n                        acceptor\r\n                        createdAt\r\n                        gameImage\r\n                        gameName\r\n                        consoleName\r\n                        challengerName\r\n                        acceptorName\r\n                        challengerScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        opponentScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        mode {\r\n                            name\r\n                            id\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n        const {data} = await client.mutate({\r\n            mutation: resolveChallengeDisputeMutation,\r\n            variables: {\r\n                input: {\r\n                    _id,\r\n                    challengerStatus,\r\n                    opponentStatus,\r\n                    status,\r\n                    challenger,\r\n                    acceptor\r\n                }\r\n            }\r\n        })\r\n        handleAuthResponse(data.resolveChallengeDispute)\r\n        const {success} = data.resolveChallengeDispute\r\n        if (success) {\r\n            dispatch({\r\n                type: SET_LOADER,\r\n                payload: false\r\n            })\r\n            if (data.resolveChallengeDispute.data._id) {\r\n                dispatch(showToastMessage(\"Challenge resolved!\", 'success'))\r\n                dispatch({\r\n                    type: UPDATE_CHALLENGES,\r\n                    payload: data.resolveChallengeDispute.data\r\n                })\r\n            }\r\n            return data.resolveChallengeDispute\r\n        } else {\r\n            dispatch(showToastMessage(data.resolveChallengeDispute.message, 'error'))\r\n        }\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\n//Subcriptions\r\n\r\nexport const subsChallenges = (handleChallenges) => dispatch => {\r\n    try {\r\n        const ChallengesSubscription = gql`\r\n        subscription{\r\n            challengesSubs {\r\n                _id\r\n                status\r\n                type\r\n                consoleId\r\n                gameId\r\n                challenger\r\n                acceptor\r\n                createdAt\r\n                gameImage\r\n                gameName\r\n                consoleName\r\n                challengerName\r\n                acceptorName\r\n                challengerScore {\r\n                  my\r\n                  opponent\r\n                  status\r\n                  proof\r\n                }\r\n                opponentScore {\r\n                  my\r\n                  opponent\r\n                  status\r\n                  proof\r\n                }\r\n                mode {\r\n                    name\r\n                    id\r\n                }\r\n              }\r\n          }\r\n        `\r\n        const observable = client.subscribe({query:  ChallengesSubscription})\r\n        return observable.subscribe(({data}) => { \r\n            handleChallenges(data.challengesSubs)\r\n        }) \r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateChallenges = (challenge) => dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: UPDATE_CHALLENGES,\r\n            payload: challenge\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n    }\r\n}","import gql from 'graphql-tag'\r\nimport _ from 'underscore'\r\nimport client from '../../../graphql/client'\r\nimport { getFieldValue, handleAuthResponse } from '../../../utils'\r\nconst {SET_CONSOLES, SET_LOADER, SET_TOTAL, SET_UPDATED_CONSOLE, REMOVE_DELETED_CONSOLE} = require('../../types')\r\nimport {request} from '../../../utils/apiService'\r\nimport { CONSTANTS } from '@src/utils/CONSTANTS'\r\n\r\n\r\nexport const getConsolesPaginated = (limit, skip, searchString) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const ConsolesQuery = gql`\r\n            query getPaginatedConsoles($limit: Int, $skip: Int, $searchString: String) {\r\n                getPaginatedConsoles(limit: $limit, skip: $skip, searchString: $searchString){\r\n                    statusCode\r\n                    success\r\n                    nextToken\r\n                    message\r\n                    data{\r\n                    totalPages\r\n                    skip\r\n                    limit\r\n                    data{\r\n                        _id\r\n                        name\r\n                        status\r\n                        image_url\r\n                        createdAt\r\n                    }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n        const {data} = await client.query({\r\n            query: ConsolesQuery,\r\n            variables: {\r\n                limit,\r\n                skip,\r\n                searchString\r\n            }\r\n        })\r\n        handleAuthResponse(data.getPaginatedConsoles)\r\n        const {success} = data.getPaginatedConsoles\r\n        if (success) {\r\n            const rooms = getFieldValue(data, 'getPaginatedConsoles.data.data')\r\n            if (!_.isEmpty(rooms)) {\r\n                dispatch({\r\n                    type: SET_CONSOLES,\r\n                    payload: rooms\r\n                })\r\n                dispatch({\r\n                    type: SET_TOTAL,\r\n                    payload: getFieldValue(data, 'getPaginatedConsoles.data.totalPages')\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: SET_CONSOLES,\r\n                    payload: []\r\n                })\r\n                dispatch({\r\n                    type: SET_TOTAL,\r\n                    payload: 0\r\n                })\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_CONSOLES,\r\n            payload: []\r\n        })\r\n        dispatch({\r\n            type: SET_TOTAL,\r\n            payload: 0\r\n        })\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const removePaginatedConsoles = () => dispatch => {\r\n    dispatch({ \r\n        type: SET_CONSOLES,\r\n        payload: []\r\n    })\r\n}\r\n\r\nexport const createUpdateConsoles = ({name, imageData, currentObj, isUpdate}) => async dispatch => {\r\n    const authtoken = localStorage.getItem('authToken')\r\n    const userId = localStorage.getItem('userId')\r\n    const {getFieldValue} = require('../../../utils')\r\n    const _ = require('underscore')\r\n\r\n    const headers = {\r\n        \"x-auth-token\": authtoken,\r\n        \"x-user-id\": userId\r\n    }\r\n    const formData = new FormData()\r\n    formData.append('document', imageData)\r\n    formData.append('name', name)\r\n    if (isUpdate) {\r\n        formData.append('status', currentObj.status)\r\n        formData.append('id', currentObj._id)\r\n    }\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const result = await request(\r\n            `${CONSTANTS.BACKEND_BASE_URL}/console`,\r\n            'post',\r\n            headers,\r\n            formData\r\n        )\r\n        const consoleData = getFieldValue(result, 'data.consoles')\r\n        if (!_.isEmpty(consoleData)) {\r\n            handleAuthResponse(result.data)\r\n            if (!_.isEmpty(consoleData)) {\r\n                dispatch({\r\n                    type: SET_UPDATED_CONSOLE,\r\n                    payload: consoleData\r\n                })\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        return result.data\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        return {success:false, message:[error.message]}\r\n    }\r\n}\r\n\r\nexport const getConsoles = () => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const ConsolesQuery = gql`\r\n        query getConsoles {\r\n            getConsoles {\r\n              statusCode\r\n              success\r\n              nextToken\r\n              message\r\n              data {\r\n                _id\r\n                name\r\n                image_url\r\n                createdAt\r\n                status\r\n              }\r\n            }  \r\n          }\r\n        `\r\n        const {data} = await client.query({\r\n            query: ConsolesQuery\r\n        })\r\n        handleAuthResponse(data.getConsoles)\r\n        const {success} = data.getConsoles\r\n        if (success) {\r\n            const consoles = getFieldValue(data, 'getConsoles.data')\r\n            if (!_.isEmpty(consoles)) {\r\n                dispatch({\r\n                    type: SET_CONSOLES,\r\n                    payload: consoles\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: SET_CONSOLES,\r\n                    payload: []\r\n                })\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_CONSOLES,\r\n            payload: []\r\n        })\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteConsoles = (_id) => async dispatch => {\r\n    const authtoken = localStorage.getItem('authToken')\r\n    const userId = localStorage.getItem('userId')\r\n    const {getFieldValue} = require('../../../utils')\r\n    const _ = require('underscore')\r\n\r\n    const headers = {\r\n        \"x-auth-token\": authtoken,\r\n        \"x-user-id\": userId\r\n    }\r\n    const formData = new FormData()\r\n    formData.append('id', _id)\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const result = await request(\r\n            `${CONSTANTS.BACKEND_BASE_URL}/console`,\r\n            'put',\r\n            headers,\r\n            formData\r\n        )\r\n        const consoleData = getFieldValue(result, 'data.id')\r\n        if (!_.isEmpty(consoleData)) {\r\n            handleAuthResponse(result.data)\r\n            if (!_.isEmpty(consoleData)) {\r\n                dispatch({\r\n                    type: REMOVE_DELETED_CONSOLE,\r\n                    payload: consoleData\r\n                })\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        return result.data\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        return {success:false, message:[error.message]}\r\n    }\r\n}","import gql from 'graphql-tag'\r\nimport _ from 'underscore'\r\nimport client from '../../../graphql/client'\r\nimport { getFieldValue, handleAuthResponse } from '../../../utils'\r\nconst {SET_GAMES, SET_LOADER, SET_UPDATED_GAMES, SET_TOTAL, REMOVE_DELETED_GAMES} = require('../../types')\r\nimport {request} from '../../../utils/apiService'\r\nimport { CONSTANTS } from '@src/utils/CONSTANTS'\r\n\r\n\r\nexport const getGamesPaginated = (limit, skip, searchString) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const GamesQuery = gql`\r\n            query getPaginatedGames($limit: Int, $skip: Int, $searchString: String){\r\n                getPaginatedGames(limit: $limit, skip: $skip, searchString: $searchString) {\r\n                statusCode\r\n                success\r\n                nextToken\r\n                message\r\n                data {\r\n                    totalPages\r\n                    skip\r\n                    limit\r\n                    data {\r\n                    _id\r\n                    name\r\n                    image_url\r\n                    consoles\r\n                    status\r\n                    createdAt\r\n                    updatedAt\r\n                    }\r\n                }\r\n                }\r\n            }\r\n        `\r\n        const {data} = await client.query({\r\n            query: GamesQuery,\r\n            variables: {\r\n                limit,\r\n                skip,\r\n                searchString\r\n            }\r\n        })\r\n        handleAuthResponse(data.getPaginatedGames)\r\n        const {success} = data.getPaginatedGames\r\n        if (success) {\r\n            const games = getFieldValue(data, 'getPaginatedGames.data.data')\r\n            if (!_.isEmpty(games)) {\r\n                dispatch({\r\n                    type: SET_GAMES,\r\n                    payload: games\r\n                })\r\n                dispatch({\r\n                    type: SET_TOTAL,\r\n                    payload: getFieldValue(data, 'getPaginatedGames.data.totalPages')\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: SET_GAMES,\r\n                    payload: []\r\n                })\r\n                dispatch({\r\n                    type: SET_TOTAL,\r\n                    payload: 0\r\n                })\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_GAMES,\r\n            payload: []\r\n        })\r\n        dispatch({\r\n            type: SET_TOTAL,\r\n            payload: 0\r\n        })\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const getGamesByConsoleId = (consoleId) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const GamesQuery = gql`\r\n            query getGamesByConsoleId($consoleId:ID) {\r\n                getGamesByConsoleId(consoleId: $consoleId) {\r\n                statusCode\r\n                success\r\n                message\r\n                nextToken\r\n                data {\r\n                    _id\r\n                    name\r\n                    image_url\r\n                    status\r\n                    createdAt\r\n                }\r\n                }\r\n            }\r\n        `\r\n        const {data} = await client.query({\r\n            query: GamesQuery,\r\n            variables: {\r\n                consoleId\r\n            }\r\n        })\r\n        handleAuthResponse(data.getGamesByConsoleId)\r\n        const {success} = data.getGamesByConsoleId\r\n        if (success) {\r\n            const games = getFieldValue(data, 'getGamesByConsoleId.data')\r\n            if (!_.isEmpty(games)) {\r\n                dispatch({\r\n                    type: SET_GAMES,\r\n                    payload: games\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: SET_GAMES,\r\n                    payload: []\r\n                })\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_GAMES,\r\n            payload: []\r\n        })\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const removePaginatedGames = () => dispatch => {\r\n    dispatch({ \r\n        type: SET_GAMES,\r\n        payload: []\r\n    })\r\n}\r\n\r\nexport const createUpdateGames = ({name, consoles, imageData, currentObj, isUpdate}) => async dispatch => {\r\n    const authtoken = localStorage.getItem('authToken')\r\n    const userId = localStorage.getItem('userId')\r\n    const {getFieldValue} = require('../../../utils')\r\n    const _ = require('underscore')\r\n\r\n    const headers = {\r\n        \"x-auth-token\": authtoken,\r\n        \"x-user-id\": userId\r\n    }\r\n    const formData = new FormData()\r\n    formData.append('document', imageData)\r\n    formData.append('name', name)\r\n    consoles.forEach(console => formData.append(\"consoles[]\", console))\r\n    if (isUpdate) {\r\n        formData.append('status', currentObj.status)\r\n        formData.append('id', currentObj._id)\r\n    }\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const result = await request(\r\n            `${CONSTANTS.BACKEND_BASE_URL}/game`,\r\n            'post',\r\n            headers,\r\n            formData\r\n        )\r\n        const gameData = getFieldValue(result, 'data.games')\r\n        if (!_.isEmpty(gameData)) {\r\n            handleAuthResponse(result.data)\r\n            if (!_.isEmpty(gameData)) {\r\n                dispatch({\r\n                    type: SET_UPDATED_GAMES,\r\n                    payload: gameData\r\n                })\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        return result.data\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        return {success:false, message:[error.message]}\r\n    }\r\n}\r\n\r\nexport const deleteGames = (_id) => async dispatch => {\r\n    const authtoken = localStorage.getItem('authToken')\r\n    const userId = localStorage.getItem('userId')\r\n    const {getFieldValue} = require('../../../utils')\r\n    const _ = require('underscore')\r\n\r\n    const headers = {\r\n        \"x-auth-token\": authtoken,\r\n        \"x-user-id\": userId\r\n    }\r\n    const formData = new FormData()\r\n    formData.append('id', _id)\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const result = await request(\r\n            `${CONSTANTS.BACKEND_BASE_URL}/game`,\r\n            'put',\r\n            headers,\r\n            formData\r\n        )\r\n        const gameData = getFieldValue(result, 'data.id')\r\n        if (!_.isEmpty(gameData)) {\r\n            handleAuthResponse(result.data)\r\n            if (!_.isEmpty(gameData)) {\r\n                dispatch({\r\n                    type: REMOVE_DELETED_GAMES,\r\n                    payload: gameData\r\n                })\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        return result.data\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        return {success:false, message:[error.message]}\r\n    }\r\n}","// ** React Imports\r\nimport { useEffect, useState, Fragment, forwardRef } from 'react'\r\n\r\n// ** Third Party Components\r\nimport Stepper from 'bs-stepper'\r\nimport classnames from 'classnames'\r\nimport { PropTypes } from 'prop-types'\r\nimport { ChevronRight } from 'react-feather'\r\n\r\n// ** Styles\r\nimport 'bs-stepper/dist/css/bs-stepper.min.css'\r\nimport '../../../@core/scss/base/plugins/forms/form-wizard.scss'\r\n\r\nconst Wizard = forwardRef((props, ref) => {\r\n  // ** Props\r\n  const { type, className, steps, separator, options, instance } = props\r\n\r\n  // ** State\r\n  const [activeIndex, setActiveIndex] = useState(0)\r\n\r\n  // ** Vars\r\n  let stepper = null\r\n\r\n  // ** Step change listener on mount\r\n  useEffect(() => {\r\n    stepper = new Stepper(ref.current, options)\r\n\r\n    ref.current.addEventListener('shown.bs-stepper', function (event) {\r\n      setActiveIndex(event.detail.indexStep)\r\n    })\r\n\r\n    if (instance) {\r\n      instance(stepper)\r\n    }\r\n  }, [])\r\n\r\n  // ** Renders Wizard Header\r\n  const renderHeader = () => {\r\n    return steps.map((step, index) => {\r\n      return (\r\n        <Fragment key={step.id}>\r\n          {index !== 0 && index !== steps.length ? <div className='line'>{separator}</div> : null}\r\n          <div\r\n            className={classnames('step', {\r\n              crossed: activeIndex > index,\r\n              active: index === activeIndex\r\n            })}\r\n            data-target={`#${step.id}`}\r\n          >\r\n            <button type='button' className='step-trigger'>\r\n              <span className='bs-stepper-box'>{step.icon ? step.icon : index + 1}</span>\r\n              <span className='bs-stepper-label'>\r\n                <span className='bs-stepper-title'>{step.title}</span>\r\n                {step.subtitle ? <span className='bs-stepper-subtitle'>{step.subtitle}</span> : null}\r\n              </span>\r\n            </button>\r\n          </div>\r\n        </Fragment>\r\n      )\r\n    })\r\n  }\r\n\r\n  // ** Renders Wizard Content\r\n  const renderContent = () => {\r\n    return steps.map((step, index) => {\r\n      return (\r\n        <div\r\n          className={classnames('content', {\r\n            'active dstepper-block': activeIndex === index\r\n          })}\r\n          id={step.id}\r\n          key={step.id}\r\n        >\r\n          {step.content}\r\n        </div>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      className={classnames('bs-stepper', {\r\n        [className]: className,\r\n        vertical: type === 'vertical',\r\n        'vertical wizard-modern': type === 'modern-vertical',\r\n        'wizard-modern': type === 'modern-horizontal'\r\n      })}\r\n    >\r\n      <div className='bs-stepper-header'>{renderHeader()}</div>\r\n      <div className='bs-stepper-content'>{renderContent()}</div>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default Wizard\r\n\r\n// ** Default Props\r\nWizard.defaultProps = {\r\n  type: 'horizontal',\r\n  separator: <ChevronRight size={17} />,\r\n  options: {}\r\n}\r\n\r\n// ** PropTypes\r\nWizard.propTypes = {\r\n  type: PropTypes.string,\r\n  instance: PropTypes.func,\r\n  options: PropTypes.object,\r\n  className: PropTypes.string,\r\n  separator: PropTypes.element,\r\n  steps: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      title: PropTypes.string.isRequired,\r\n      subtitle: PropTypes.string,\r\n      icon: PropTypes.any,\r\n      content: PropTypes.any.isRequired\r\n    })\r\n  ).isRequired\r\n}\r\n","import React, { Fragment } from 'react'\r\nimport { ArrowRight, ArrowLeft } from 'react-feather'\r\nimport { Button } from 'reactstrap'\r\n\r\nconst ChallengeRules = ({ stepper }) => {\r\n\r\n\r\n  const onSubmit = () => {\r\n    stepper.next()\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"content-header\">\r\n        <h5 className=\"mb-0\">Challenge Rules</h5>\r\n        <small className=\"text-muted\">Please go through it carefully.</small>\r\n        <br />\r\n        <br />\r\n        <p>\r\n          <b>Lorem Ipsum</b> is simply dummy text of the printing and\r\n          typesetting industry. Lorem Ipsum has been the industry's standard\r\n          dummy text ever since the 1500s, when an unknown printer took a galley\r\n          of type and scrambled it to make a type specimen book. It has survived\r\n          not only five centuries, but also the leap into electronic\r\n          typesetting, remaining essentially unchanged. It was popularised in\r\n          the 1960s with the release of Letraset sheets containing Lorem Ipsum\r\n          passages, and more recently with desktop publishing software like\r\n          Aldus PageMaker including versions of Lorem Ipsum.\r\n        </p>\r\n      </div>\r\n\r\n      <div className='d-flex justify-content-between'>\r\n        <Button.Ripple color='primary' className='btn-prev' onClick={() => {}} outline disabled>\r\n          <ArrowLeft size={14} className='align-middle mr-sm-25 mr-0'></ArrowLeft>\r\n          <span className='align-middle d-sm-inline-block d-none'>Previous</span>\r\n        </Button.Ripple>\r\n        <Button.Ripple type='submit' color='primary' onClick={onSubmit} className='btn-next'>\r\n          <span className='align-middle d-sm-inline-block d-none'>Next</span>\r\n          <ArrowRight size={14} className='align-middle ml-sm-25 ml-0'></ArrowRight>\r\n        </Button.Ripple>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ChallengeRules","import { Fragment, useEffect, useState } from 'react'\r\nimport Select from 'react-select'\r\nimport { useForm } from 'react-hook-form'\r\nimport { ArrowLeft, ArrowRight } from 'react-feather'\r\nimport { selectThemeColors, isObjEmpty } from '@utils'\r\nimport { Label, FormGroup, Row, Col, Button, Form } from 'reactstrap'\r\nimport { setAddEditPopupData } from '@src/redux/actions/layout'\r\n\r\nimport '@styles/react/libs/react-select/_react-select.scss'\r\nimport { getConsoles, removePaginatedConsoles } from '../../../redux/actions/consoles'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getGamesByConsoleId, removePaginatedGames } from '../../../redux/actions/games'\r\nimport { showToastMessage } from '../../../redux/actions/toastNotification'\r\n\r\nconst ChooseGameConsole = ({ stepper, type }) => {\r\n\r\n  const dispatch = useDispatch()\r\n  const { consoles } = useSelector((state) => state.consoles)\r\n  const { games } = useSelector((state) => state.games)\r\n  const [selectedConsole, setSelectedConsole] = useState(\"\")\r\n  const [selectedGame, setSelectedGame] = useState(\"\")\r\n  const { addEditPopupData } = useSelector(\r\n    (state) => state.layout\r\n  )\r\n  const { register, errors, handleSubmit, trigger } = useForm()\r\n\r\n  const onSubmit = () => {\r\n\r\n    if (selectedGame && selectedConsole) {\r\n      const {_id: opponentId, userName: opponentUserName, profileImage} = addEditPopupData\r\n      const data = {\r\n        gameId: selectedGame.value,\r\n        game: selectedGame.label,\r\n        consoleId: selectedConsole.value,\r\n        console: selectedConsole.label\r\n      }\r\n      if (opponentId) {\r\n        data['acceptor'] = opponentId\r\n        data['acceptorUserName'] = opponentUserName\r\n        data['acceptorPic'] = profileImage\r\n      }\r\n      dispatch(setAddEditPopupData(data))\r\n      trigger()\r\n      if (isObjEmpty(errors)) {\r\n        stepper.next()\r\n      }\r\n    } else {\r\n      dispatch(showToastMessage(\"Please select game and console properly!\", 'error'))\r\n      return false\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(getConsoles())\r\n    return () => {\r\n      dispatch(removePaginatedConsoles([]))\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    dispatch(getGamesByConsoleId(selectedConsole?.value))\r\n    setSelectedGame(\"\")\r\n    return () => {\r\n        dispatch(removePaginatedGames())\r\n    }\r\n  }, [selectedConsole])\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='content-header'>\r\n        <h5 className='mb-0'>Select Console and Game</h5>\r\n        {/* <small>some text.</small> */}\r\n      </div>\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Row>\r\n          <FormGroup tag={Col} md='6'>\r\n            <Label className='form-label' for={`console-${type}`}>\r\n              Console\r\n            </Label>\r\n            <Select\r\n              theme={selectThemeColors}\r\n              isClearable={false}\r\n              id={`console-${type}`}\r\n              className='react-select'\r\n              classNamePrefix='select'\r\n              options={consoles.map(console => ({\r\n                value: console._id,\r\n                label: console.name\r\n              }))}\r\n              onChange={(value) => setSelectedConsole(value)}\r\n              defaultValue={consoles[0]}\r\n              innerRef={register({ required: true })}\r\n            />\r\n          </FormGroup>\r\n        </Row>\r\n        <Row>\r\n          <FormGroup tag={Col} md='6'>\r\n            <Label className='form-label' for={`game-${type}`}>\r\n              Game\r\n            </Label>\r\n            <Select\r\n              theme={selectThemeColors}\r\n              isClearable={false}\r\n              id={`game-${type}`}\r\n              className='react-select'\r\n              classNamePrefix='select'\r\n              options={games.map(game => ({\r\n                value: game._id,\r\n                label: game.name\r\n              }))}\r\n              value={selectedGame}\r\n              onChange={(value) => setSelectedGame(value)}\r\n              defaultValue={games[0]}\r\n              innerRef={register({ required: true })}\r\n            />\r\n          </FormGroup>\r\n        </Row>\r\n        <div className='d-flex justify-content-between'>\r\n          <Button.Ripple color='primary' className='btn-prev' onClick={() => stepper.previous()}>\r\n            <ArrowLeft size={14} className='align-middle mr-sm-25 mr-0'></ArrowLeft>\r\n            <span className='align-middle d-sm-inline-block d-none'>Previous</span>\r\n          </Button.Ripple>\r\n          <Button.Ripple type='submit' color='primary' className='btn-next'>\r\n            <span className='align-middle d-sm-inline-block d-none'>Next</span>\r\n            <ArrowRight size={14} className='align-middle ml-sm-25 ml-0'></ArrowRight>\r\n          </Button.Ripple>\r\n        </div>\r\n      </Form>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ChooseGameConsole\r\n","import { Fragment, useState } from 'react'\r\nimport Select from 'react-select'\r\nimport { useForm } from 'react-hook-form'\r\nimport { ArrowLeft } from 'react-feather'\r\nimport { selectThemeColors } from '@utils'\r\nimport { Label, FormGroup, Row, Col, Button, Form, Card } from 'reactstrap'\r\nimport Avatar from '@components/avatar'\r\n\r\nimport '@styles/react/libs/react-select/_react-select.scss'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setAddEditPopupData } from '@src/redux/actions/layout'\r\nimport { createUpdateChallenge } from '../../../redux/actions/challenges'\r\nimport { showToastMessage } from '../../../redux/actions/toastNotification'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { CONSTANTS } from '../../../utils/CONSTANTS'\r\n\r\nconst ChooseChallengeType = ({ stepper, type }) => {\r\n\r\n  const challengeType = [\r\n    // {\r\n    //   label: \"FREE Play 1vs1\",\r\n    //   value: \"free-play-1vs1\"\r\n    // },\r\n    {\r\n      label: \"FUT 1vs1\",\r\n      value: \"fut-1vs1\"\r\n    },\r\n    {\r\n      label: \"Real Team 1vs1\",\r\n      value: \"real-team-1vs1\"\r\n    }\r\n  ]\r\n\r\n  const { register, errors, handleSubmit, trigger } = useForm()\r\n  \r\n  const [selectedChallengeType, setSelectedChallengeType] = useState(challengeType[0])\r\n  const {addEditPopupData} = useSelector(state => state.layout)\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const onSubmit = () => {\r\n    if (addEditPopupData) {\r\n      const { label: name, value: id } = selectedChallengeType\r\n      const dataToSend = {\r\n        type: CONSTANTS.STATUS.PUBLIC,\r\n        status: CONSTANTS.STATUS.ACTIVE,\r\n        mode: {id, name},\r\n        gameId: addEditPopupData?.gameId,\r\n        consoleId: addEditPopupData.consoleId\r\n      }\r\n      if (addEditPopupData.acceptor) {\r\n        dataToSend['type'] = CONSTANTS.STATUS.PRIVATE\r\n        dataToSend['status'] = CONSTANTS.STATUS.PENDING\r\n        dataToSend['acceptor'] = addEditPopupData.acceptor\r\n      }\r\n      dispatch(setAddEditPopupData({}))\r\n      dispatch(createUpdateChallenge(dataToSend))\r\n      history.push('/')\r\n    } else {\r\n      dispatch(showToastMessage(\"Please contact admin if error persist!\", 'error'))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"content-header\">\r\n        <h5 className=\"mb-0\">One step closer to create challenge, Hurrey!</h5>\r\n        {addEditPopupData?.acceptor && (\r\n          <Card className=\"mt-1\">\r\n            <Row className=\"p-1 pb-2\">\r\n              {addEditPopupData?.acceptorPic && (\r\n                <Col className=\"d-flex mt-1\" md=\"1\" sm=\"1\">\r\n                  <Avatar size='md' img={addEditPopupData?.acceptorPic}  imgHeight='40' imgWidth='40'></Avatar>\r\n                </Col>\r\n              )}\r\n              {addEditPopupData?.acceptorUserName && (\r\n                <Col className=\"d-flex mt-2\" md=\"11\" sm=\"11\">\r\n                  <h5>\r\n                    Challenging to <b>{addEditPopupData?.acceptorUserName}</b>\r\n                  </h5>\r\n                </Col>\r\n              )}\r\n            </Row>\r\n          </Card>\r\n        )}\r\n      </div>\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Row className=\"mb-2\">\r\n          <FormGroup tag={Col} md=\"6\">\r\n            <Label className=\"form-label\" for={`challenge–type-${type}`}>\r\n              Select Challenge Type\r\n            </Label>\r\n            <Select\r\n              theme={selectThemeColors}\r\n              isClearable={false}\r\n              id={`challenge–type-${type}`}\r\n              className=\"react-select\"\r\n              classNamePrefix=\"select\"\r\n              options={challengeType}\r\n              onChange={(value) => setSelectedChallengeType(value)}\r\n              defaultValue={challengeType[0]}\r\n              value={selectedChallengeType}\r\n              innerRef={register({ required: true })}\r\n            />\r\n          </FormGroup>\r\n        </Row>\r\n        <div className=\"d-flex justify-content-between\">\r\n          <Button.Ripple\r\n            color=\"primary\"\r\n            className=\"btn-prev\"\r\n            onClick={() => stepper.previous()}\r\n          >\r\n            <ArrowLeft\r\n              size={14}\r\n              className=\"align-middle mr-sm-25 mr-0\"\r\n            ></ArrowLeft>\r\n            <span className=\"align-middle d-sm-inline-block d-none\">\r\n              Previous\r\n            </span>\r\n          </Button.Ripple>\r\n          <Button.Ripple type=\"submit\" color=\"primary\" className=\"btn-next\">\r\n            <span className=\"align-middle d-sm-inline-block d-none\">\r\n              Create Challenge\r\n            </span>\r\n          </Button.Ripple>\r\n        </div>\r\n      </Form>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ChooseChallengeType\r\n","import React, { useRef, useState } from 'react'\r\nimport Wizard from '@components/wizard'\r\nimport ChallengeRules from './steps/ChallengeRules'\r\nimport ChooseGameConsole from './steps/ChooseGameConsole'\r\nimport ChooseChallengeType from './steps/ChooseChallengeType'\r\n\r\nconst ChallengeForm = () => {\r\n\r\n  const [stepper, setStepper] = useState(null)\r\n  const ref = useRef(null)\r\n\r\n  const steps = [\r\n    {\r\n      id: 'rules-details',\r\n      title: 'Rules',\r\n      subtitle: '',\r\n      content: <ChallengeRules stepper={stepper} type='modern-vertical' />\r\n    },\r\n    {\r\n      id: 'choose-details',\r\n      title: 'Choose Game And Console',\r\n      subtitle: '',\r\n      content: <ChooseGameConsole stepper={stepper} type='modern-vertical' />\r\n    },\r\n    {\r\n      id: 'choose-challenge-type',\r\n      title: 'Create Challenge',\r\n      subtitle: 'Choose Type',\r\n      content: <ChooseChallengeType stepper={stepper} type='modern-vertical' />\r\n    }\r\n  ]\r\n\r\n  return (\r\n    <div className='modern-vertical-wizard'>\r\n      <Wizard\r\n        type='modern-vertical'\r\n        ref={ref}\r\n        steps={steps}\r\n        instance={el => setStepper(el)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChallengeForm\r\n","import React, { Fragment } from \"react\"\r\nimport { Row, Col, Card } from \"reactstrap\"\r\nimport Breadcrumbs from '@components/breadcrumbs'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport ChallengeForm from \"./ChallegeForm\"\r\n\r\nconst createChallenge = () => {\r\n  \r\n  return (\r\n    <Fragment>\r\n      <Breadcrumbs breadCrumbTitle={<FormattedMessage id=\"Challenge\" />} breadCrumbActive={<FormattedMessage id=\"Create Challenge\" />} />\r\n      <Row>\r\n        <Col sm=\"12\"><ChallengeForm /></Col>\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default createChallenge"],"sourceRoot":""}