{"version":3,"sources":["views/components/Loader/index.js","@core/components/breadcrumbs/index.js","redux/actions/layoutSettings/index.js","views/components/Editor/index.js","views/LayoutSettings/LayoutUpdate.js"],"names":["LoaderComponent","loading","className","color","style","display","margin","size","BreadCrumbs","props","breadCrumbTitle","breadCrumbParent","breadCrumbParent2","breadCrumbParent3","breadCrumbActive","tag","to","active","require","SET_LAYOUT_SETTINGS","SET_LOADER","SET_TOTAL","SET_LAYOUT_SETTING","getLayoutSettings","limit","page","searchString","dispatch","type","payload","layoutSettingsQuery","gql","client","query","variables","skip","data","handleAuthResponse","success","layoutSettings","getFieldValue","_","isEmpty","console","error","removeLayoutSettings","getLayoutSettingById","id","layoutSetting","removeLayourSetting","updateLayourSetting","position","html","isProdVisible","isQaVisible","isLiveVisible","layoutSettingsMutation","mutate","mutation","input","_id","getLayoutSettingsBypagePostion","updateLayoutSettingStore","Editor","value","changeHandler","editor","useRef","config","useSearch","uploader","insertImageAsBase64URI","toolbarButtonSize","defaultMode","ref","tabIndex","onBlur","newContent","connect","state","showToastMessage","useParams","useState","setPage","setPosition","setHtml","history","useHistory","LayoutSettingsSchema","yup","shape","required","useForm","mode","resolver","yupResolver","register","errors","handleSubmit","onSubmit","result","message","push","useEffect","Card","Loader","CardBody","Form","Row","Col","md","sm","FormGroup","Label","for","Input","name","placeholder","classnames","onChange","e","currentTarget","innerRef","validate","invalid","readOnly","Button","Ripple"],"mappings":"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","file":"static/js/36.58f769a6.chunk.js","sourcesContent":["import React from \"react\"\r\nimport RingLoader from \"react-spinners/RingLoader\"\r\n\r\nconst LoaderComponent = ({loading}) => {\r\n  \r\n  return loading && <div className=\"sweet-loading\">\r\n    <RingLoader color=\"#1061ae\" loading={loading} style={{ \r\n          display: \"block\",\r\n          margin: \"0 auto\"\r\n    }} size={100} />\r\n  </div>\r\n}\r\nexport default LoaderComponent","// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  UncontrolledButtonDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? <h2 className='content-header-title float-left mb-0'>{breadCrumbTitle}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/dashboard'>Dashboard</Link>\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent && <BreadcrumbItem tag='li' className='text-primary'>\r\n                  {breadCrumbParent}\r\n                </BreadcrumbItem>}\r\n                {breadCrumbParent2 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbParent3 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbActive && (\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>) }\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string\r\n}\r\n","import gql from 'graphql-tag'\r\nimport _ from 'underscore'\r\nimport client from '../../../graphql/client'\r\nimport { getFieldValue, handleAuthResponse } from '../../../utils'\r\nconst {SET_LAYOUT_SETTINGS, SET_LOADER, SET_TOTAL, SET_LAYOUT_SETTING} = require('../../types')\r\n\r\nexport const getLayoutSettings = (limit, page, searchString) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const layoutSettingsQuery = gql`\r\n             query getLayoutSettings($limit: Int, $skip: Int, $searchString:String){\r\n                getLayoutSettings(limit: $limit, skip: $skip, searchString:$searchString ){\r\n                statusCode\r\n                success\r\n                message\r\n                data{\r\n                    totalPages\r\n                    skip\r\n                    limit\r\n                    data{\r\n                    _id\r\n                    page\r\n                    position\r\n                    html\r\n                    isQaVisible\r\n                    isProdVisible\r\n                    isLiveVisible\r\n                    }\r\n                }\r\n                nextToken\r\n            }\r\n          }`\r\n        const {data} = await client.query({\r\n            query: layoutSettingsQuery,\r\n            variables: {\r\n                limit, \r\n                skip: (page * limit),\r\n                searchString\r\n            }\r\n        })\r\n        handleAuthResponse(data.getLayoutSettings)\r\n        const {success} = data.getLayoutSettings\r\n        if (success) {\r\n            const layoutSettings = getFieldValue(data, 'getLayoutSettings.data.data')\r\n            if (!_.isEmpty(layoutSettings)) {\r\n                dispatch({\r\n                    type: SET_LAYOUT_SETTINGS,\r\n                    payload: layoutSettings\r\n                })\r\n                dispatch({\r\n                    type: SET_TOTAL,\r\n                    payload: getFieldValue(data, 'getLayoutSettings.data.totalPages')\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: SET_LAYOUT_SETTINGS,\r\n                    payload: []\r\n                })\r\n                dispatch({\r\n                    type: SET_TOTAL,\r\n                    payload: 0\r\n                })\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LAYOUT_SETTINGS,\r\n            payload: []\r\n        })\r\n        dispatch({\r\n            type: SET_TOTAL,\r\n            payload: 0\r\n        })\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const removeLayoutSettings = () => async dispatch => {\r\n    dispatch({\r\n        type: SET_LAYOUT_SETTINGS,\r\n        payload: []\r\n    })\r\n    dispatch({\r\n        type: SET_TOTAL,\r\n        payload: 0\r\n    })\r\n}\r\n\r\nexport const getLayoutSettingById = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const layoutSettingsQuery = gql`\r\n             query getLayoutSettingById($id: ID){\r\n                getLayoutSettingById(id: $id){\r\n                statusCode\r\n                success\r\n                message\r\n                data{\r\n                    _id\r\n                    page\r\n                    position\r\n                    html\r\n                }\r\n                nextToken\r\n            }\r\n          }`\r\n        const {data} = await client.query({\r\n            query: layoutSettingsQuery,\r\n            variables: {\r\n                id\r\n            }\r\n        })\r\n        handleAuthResponse(data.getLayoutSettingById)\r\n        const {success} = data.getLayoutSettingById\r\n        if (success) {\r\n            const layoutSetting = getFieldValue(data, 'getLayoutSettingById.data')\r\n            if (!_.isEmpty(layoutSetting)) {\r\n                dispatch({\r\n                    type: SET_LAYOUT_SETTING,\r\n                    payload: layoutSetting\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: SET_LAYOUT_SETTING,\r\n                    payload: {}\r\n                })\r\n                dispatch({\r\n                    type: SET_TOTAL,\r\n                    payload: 0\r\n                })\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        dispatch({\r\n            type: SET_LAYOUT_SETTING,\r\n            payload: {}\r\n        })\r\n    }\r\n}\r\n\r\nexport const removeLayourSetting = () => dispatch => {\r\n    dispatch({\r\n        type: SET_LAYOUT_SETTING,\r\n        payload: {}\r\n    })\r\n}\r\nexport const updateLayourSetting = ({page, position, html, id, isProdVisible, isQaVisible, isLiveVisible}) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const layoutSettingsMutation = gql`\r\n            mutation layoutSettingsMutation($input: LayoutSettingsInput){\r\n                layoutSettingsMutation(input: $input){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data{\r\n                        page\r\n                        position\r\n                        html\r\n                        isQaVisible\r\n                        isProdVisible\r\n                        isLiveVisible\r\n                        createdBy\r\n                        createdAt\r\n                        updatedBy\r\n                        updatedAt\r\n                    }\r\n                }\r\n            }`\r\n        const {data} = await client.mutate({\r\n            mutation: layoutSettingsMutation,\r\n            variables: {\r\n                input: {\r\n                    page,\r\n                    position,\r\n                    html,\r\n                    isProdVisible,\r\n                    isQaVisible,\r\n                    isLiveVisible,\r\n                    _id: id\r\n                }\r\n            }\r\n        })\r\n        handleAuthResponse(data.layoutSettingsMutation)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        return data.layoutSettingsMutation\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const getLayoutSettingsBypagePostion = (page, position) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const layoutSettingsQuery = gql`\r\n             query getLayoutSettingsBypagePostion($page: String, $position: String){\r\n                getLayoutSettingsBypagePostion(page: $page, position: $position){\r\n                statusCode\r\n                success\r\n                message\r\n                data{\r\n                    _id\r\n                    page\r\n                    position\r\n                    html\r\n                }\r\n                nextToken\r\n            }\r\n          }`\r\n        const {data} = await client.query({\r\n            query: layoutSettingsQuery,\r\n            variables: {\r\n                page,\r\n                position\r\n            }\r\n        })\r\n        const {success} = data.getLayoutSettingsBypagePostion\r\n        if (success) {\r\n            const layoutSetting = getFieldValue(data, 'getLayoutSettingsBypagePostion.data')\r\n            if (!_.isEmpty(layoutSetting)) {\r\n                dispatch({\r\n                    type: SET_LAYOUT_SETTING,\r\n                    payload: layoutSetting\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: SET_LAYOUT_SETTING,\r\n                    payload: {}\r\n                })\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        dispatch({\r\n            type: SET_LAYOUT_SETTING,\r\n            payload: {}\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateLayoutSettingStore = (layoutSettings) => async (dispatch) => {\r\n  dispatch({\r\n    type: SET_LAYOUT_SETTINGS,\r\n    payload: layoutSettings\r\n  })\r\n}","import React, {\r\n    useState,\r\n    useRef\r\n} from 'react'\r\nimport JoditEditor from \"jodit-react\"\r\n\r\nconst Editor = ({ value, changeHandler, className}) => {\r\n    const editor = useRef(null)\r\n    const config = {\r\n        useSearch: true,\r\n        uploader: {\r\n            insertImageAsBase64URI: true\r\n        },\r\n        toolbarButtonSize: \"small\",\r\n        defaultMode: \"1\",\r\n        defaultMode: true,\r\n        toolbarInlineForSelection: true,\r\n        showPlaceholder: false,\r\n        buttons: \"source,bold,italic,underline,strikethrough,eraser,ul,ol,indent,outdent,left,font,fontsize,paragraph,brush,image,video\"\r\n          \r\n    }\r\n \r\n    return (<JoditEditor ref = {editor}\r\n        value = {value}\r\n        config = {config}\r\n        tabIndex = {1} // tabIndex of textarea\r\n        onBlur = {newContent => changeHandler(newContent)} // preferred to use only this option to update the content for performance reasons\r\n        />)\r\n}\r\n\r\nexport default Editor","import React, { useEffect, useState } from 'react'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { Card, Row, Col, Label, Input, CardBody, Form, FormGroup, Button } from 'reactstrap'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport LoaderComponent from '../components/Loader'\r\nimport Breadcrumbs from '@components/breadcrumbs'\r\nimport {getLayoutSettingById, removeLayourSetting, updateLayourSetting} from '@src/redux/actions/layoutSettings'\r\nimport {useParams, useHistory, Link} from 'react-router-dom'\r\nimport _ from 'underscore'\r\nimport '@styles/react/libs/editor/editor.scss'\r\nimport Editor from '../components/Editor'\r\nimport * as yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport classnames from 'classnames'\r\nimport FormFeedback from 'reactstrap/lib/FormFeedback'\r\nimport { showToastMessage } from '../../redux/actions/toastNotification'\r\n\r\n\r\nconst LayoutSettingsUpdate = ({ loading, layoutSetting, getLayoutSettingById, removeLayourSetting, updateLayourSetting, showToastMessage }) => {\r\n    const {id} = useParams()\r\n    const [page, setPage] = useState('')\r\n    const [position, setPosition] = useState('')\r\n    const [html, setHtml] = useState('')\r\n    const history = useHistory()\r\n    const LayoutSettingsSchema = yup.object().shape({\r\n        page: yup.string().required(),\r\n        position: yup.string().required()\r\n    })\r\n\r\n    const { register, errors, handleSubmit } = useForm({ mode: 'onBlur', resolver: yupResolver(LayoutSettingsSchema) })\r\n\r\n    const onSubmit = async data => {\r\n        data = {...data, html, id, isProdVisible: true}\r\n        if (_.isEmpty(errors)) {\r\n            try {\r\n                const result = await updateLayourSetting(data)\r\n                if (result.success) {\r\n                    showToastMessage(result.message, 'success')\r\n                    history.push(\"/layout-settings\")\r\n                } else {\r\n                    showToastMessage(result.message, 'error')\r\n                }\r\n            } catch (error) {\r\n                console.error('error: ', error)\r\n                showToastMessage(error.message, 'error')\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getLayoutSettingById(id)\r\n        return () => {\r\n            removeLayourSetting()\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!_.isEmpty(layoutSetting)) {\r\n            setPage(layoutSetting.page)\r\n            setPosition(layoutSetting.position)\r\n            setHtml(layoutSetting.html)\r\n        }\r\n\r\n    }, [layoutSetting])\r\n\r\n    return (\r\n        <>\r\n            <Breadcrumbs breadCrumbParent={<Link to='/layout-settings'><FormattedMessage id=\"Layout Settings\" /></Link>} breadCrumbTitle={<FormattedMessage id=\"Layout Settings Update\" />} breadCrumbActive={<FormattedMessage id=\"Layout Settings Update\" />} />\r\n            <Card>\r\n                <LoaderComponent loading={loading} />\r\n                <CardBody>\r\n                    {layoutSetting ? \r\n                        (<Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\r\n                            <Row>\r\n                                <Col md='6' sm='12'>\r\n                                    <FormGroup>\r\n                                        <Label for='Page'>Page</Label>\r\n                                        <Input type='text' name='page' id='Page' value={page} placeholder=\"Page\"\r\n                                        className={classnames({ 'is-invalid': errors['page'] })}\r\n                                        onChange={e => setPage(e.currentTarget.value)}\r\n                                        innerRef={register({ required: true, validate: value => value !== '' })}\r\n                                        invalid={errors.page && true} readOnly\r\n                                        />\r\n                                        {errors && errors.page && <FormFeedback>{errors.page.message}</FormFeedback>}\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md='6' sm='12'>\r\n                                    <FormGroup>\r\n                                        <Label for='position'>Position</Label>\r\n                                        <Input type='text' name='position' id='position' placeholder='Position' value={position} className={classnames({ 'is-invalid': errors['position'] })}\r\n                                        onChange={e => setPosition(e.currentTarget.value)}\r\n                                        innerRef={register({ required: true, validate: value => value !== '' })}\r\n                                        invalid={errors.position && true} readOnly\r\n                                        />\r\n                                        {errors && errors.position && <FormFeedback>{errors.position.message}</FormFeedback>}\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md='12'>\r\n                                    <FormGroup>\r\n                                        <Label for='html'>HTML</Label>\r\n                                        <Editor value={html} changeHandler={html => {\r\n                                            setHtml(html)\r\n                                        }}/>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col sm='6'>\r\n                                    {/* <FormGroup className='d-flex mb-0'> */}\r\n                                    <Button.Ripple type='submit' color='primary'>\r\n                                        Update Layout Settings\r\n                                    </Button.Ripple>\r\n                                    {/* </FormGroup> */}\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>)\r\n                    : null}\r\n                \r\n                </CardBody>\r\n                </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nLayoutSettingsUpdate.propTypes = {\r\n    loading: PropTypes.bool.isRequired,\r\n    layoutSetting: PropTypes.array.isRequired,\r\n    getLayoutSettingById: PropTypes.func.isRequired,\r\n    removeLayourSetting: PropTypes.func.isRequired,\r\n    updateLayourSetting: PropTypes.func.isRequired,\r\n    showToastMessage: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loading: state.layoutSettings.loading,\r\n    layoutSetting: state.layoutSettings.layoutSetting\r\n})\r\n\r\nexport default connect(mapStateToProps, {getLayoutSettingById, removeLayourSetting, updateLayourSetting, showToastMessage})(LayoutSettingsUpdate)"],"sourceRoot":""}