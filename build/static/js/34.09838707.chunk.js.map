{"version":3,"sources":["views/components/Loader/index.js","@core/components/breadcrumbs/index.js","redux/actions/challenges/index.js","redux/actions/chats/index.js","views/Home/components/JombotronHome.js","views/Home/components/GamesComponent.js","views/Home/components/RenderChats.js","views/Home/components/GlobalChat.js","views/Home/index.js"],"names":["LoaderComponent","loading","className","color","style","display","margin","size","BreadCrumbs","props","breadCrumbTitle","breadCrumbParent","breadCrumbParent2","breadCrumbParent3","breadCrumbActive","tag","to","active","createUpdateChallenge","type","status","gameId","consoleId","mode","acceptor","dispatch","SET_LOADER","payload","createUpdateChallengeMutation","gql","client","mutate","mutation","variables","input","data","handleAuthResponse","success","_id","showToastMessage","UPDATE_CHALLENGES","message","console","error","acceptChallenge","opponent","acceptChallengeMutation","challengeAccept","getPaginatedChallenges","limit","page","searchString","userId","ChallengeQuery","query","skip","getChallenges","challenges","getFieldValue","_","isEmpty","SET_CHALLENGES","SET_TOTAL","removeChallenges","updateScore","scorces","updateScoresMutation","updateScores","uploadProof","imageData","authtoken","localStorage","getItem","require","CONSTANTS","headers","formData","FormData","append","request","BACKEND_BASE_URL","result","challengeData","resolveChallengeDispute","challengerStatus","opponentStatus","challenger","resolveChallengeDisputeMutation","subsChallenges","handleChallenges","ChallengesSubscription","subscribe","challengesSubs","updateChallenges","challenge","MessageFragment","setGlobalMessages","globalMessageQuery","getGlobalMessages","roomData","SET_GLOBAL_MESSAGES","removeGlobalMessages","addMessageToChannel","roomId","addMessageMutation","addRoomMessage","addMessage","SET_LAST_MESSAGE","getGlobalMessagesSubscriptions","handleMessageAdded","gloabalMsgSubscription","observable","globalMessages","updateGlobalMessage","messages","setCurrentChatMessages","currentChatMessageQuery","getCurrentChatMessages","length","SET_CURRENT_CHAT_MESSAGES","updateCurrentChatMessage","removeCurrentChatMessages","setMesageNotifications","notifications","SET_MESSAGE_NOTIFICATION","subsCurrentSeletedChat","handleCurrentChat","CurrentSeletedSubscription","currentChat","subsMessageNotifications","handleMessageNotification","messageNotificationSubscription","messageNotificationSubs","JombotronHome","history","useHistory","Row","Col","Jumbotron","fluid","Container","Button","Ripple","onClick","push","GamesComponent","useDispatch","useSelector","state","user","auth","handleClick","MySwal","withReactContent","Swal","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","value","document","getElementById","remove","useEffect","STATUS","ACTIVE","subscription","unsubscribe","Card","Loader","CardHeader","id","CardBody","map","Media","imgClassName","img","gameImage","imgHeight","imgWidth","body","gameName","challengerName","consoleName","getFormattedDateTime","createdAt","block","RenderChats","chats","item","index","firstName","lastName","classnames","profileImage","profileBg","content","initials","getChatTime","time","msg","globalChatSub","connect","globalChat","rooms","useState","setMsg","chatRef","setChatRef","scrollTop","Number","MAX_SAFE_INTEGER","handleSendMsg","e","preventDefault","trim","globalRoom","find","r","default","containerRef","el","options","wheelPropagation","Form","onSubmit","InputGroup","Input","onChange","target","placeholder","md","GlobalChat"],"mappings":"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","file":"static/js/34.09838707.chunk.js","sourcesContent":["import React from \"react\"\r\nimport RingLoader from \"react-spinners/RingLoader\"\r\n\r\nconst LoaderComponent = ({loading}) => {\r\n  \r\n  return loading && <div className=\"sweet-loading\">\r\n    <RingLoader color=\"#1061ae\" loading={loading} style={{ \r\n          display: \"block\",\r\n          margin: \"0 auto\"\r\n    }} size={100} />\r\n  </div>\r\n}\r\nexport default LoaderComponent","// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  UncontrolledButtonDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? <h2 className='content-header-title float-left mb-0'>{breadCrumbTitle}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/dashboard'>Dashboard</Link>\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent && <BreadcrumbItem tag='li' className='text-primary'>\r\n                  {breadCrumbParent}\r\n                </BreadcrumbItem>}\r\n                {breadCrumbParent2 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbParent3 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbActive && (\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>) }\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string\r\n}\r\n","import gql from 'graphql-tag'\r\nimport _ from 'underscore'\r\nimport client from '../../../graphql/client'\r\nimport { getFieldValue, handleAuthResponse } from '../../../utils'\r\nimport { SET_LOADER, SET_CHALLENGES, SET_TOTAL, UPDATE_CHALLENGES, REMOVE_CHALLENGES } from '../../types'\r\nimport { showToastMessage } from '../toastNotification'\r\nimport {request} from '../../../utils/apiService'\r\n\r\nexport const createUpdateChallenge = ({type, status, gameId, consoleId, mode, acceptor}) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const createUpdateChallengeMutation = gql`\r\n            mutation createUpdateChallenge($input: ChallengeInput){\r\n                createUpdateChallenge(input: $input){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data {\r\n                        _id\r\n                        status\r\n                        type\r\n                        consoleId\r\n                        gameId\r\n                        challenger\r\n                        acceptor\r\n                        createdAt\r\n                        gameImage\r\n                        gameName\r\n                        consoleName\r\n                        challengerName\r\n                        acceptorName\r\n                        challengerScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        opponentScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        mode {\r\n                            name\r\n                            id\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n        const {data} = await client.mutate({\r\n            mutation: createUpdateChallengeMutation,\r\n            variables: {\r\n                input: {\r\n                    status,\r\n                    gameId,\r\n                    consoleId,\r\n                    type,\r\n                    mode,\r\n                    acceptor\r\n                }\r\n            }\r\n        })\r\n        handleAuthResponse(data.createUpdateChallenge)\r\n        const {success} = data.createUpdateChallenge\r\n        if (success) {\r\n            dispatch({\r\n                type: SET_LOADER,\r\n                payload: false\r\n            })\r\n            if (data.createUpdateChallenge.data._id) {\r\n                dispatch(showToastMessage(\"Challenge created!\", 'success'))\r\n                dispatch({\r\n                    type: UPDATE_CHALLENGES,\r\n                    payload: data.createUpdateChallenge.data\r\n                })\r\n            }\r\n            return data.createUpdateChallenge\r\n        } else {\r\n            dispatch(showToastMessage(data.createUpdateChallenge.message, 'error'))\r\n        }\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const acceptChallenge = ({status, opponent, _id}) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const acceptChallengeMutation = gql`\r\n            mutation challengeAccept($input: ChallengeAcceptInput){\r\n                challengeAccept(input: $input){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data {\r\n                        _id\r\n                        status\r\n                        type\r\n                        consoleId\r\n                        gameId\r\n                        challenger\r\n                        acceptor\r\n                        createdAt\r\n                        gameImage\r\n                        gameName\r\n                        consoleName\r\n                        challengerName\r\n                        acceptorName\r\n                        challengerScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        opponentScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        mode {\r\n                            name\r\n                            id\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n        const {data} = await client.mutate({\r\n            mutation: acceptChallengeMutation,\r\n            variables: {\r\n                input: {\r\n                    status,\r\n                    acceptor: opponent,\r\n                    _id\r\n                }\r\n            }\r\n        })\r\n        handleAuthResponse(data.challengeAccept)\r\n        const {success} = data.challengeAccept\r\n        if (success) {\r\n            dispatch({\r\n                type: SET_LOADER,\r\n                payload: false\r\n            })\r\n            if (data.challengeAccept.data._id) {\r\n                dispatch(showToastMessage(\"Challenge accepted!\", 'success'))\r\n                dispatch({\r\n                    type: UPDATE_CHALLENGES,\r\n                    payload: data.challengeAccept.data\r\n                })\r\n            }\r\n            return data.challengeAccept\r\n        } else {\r\n            dispatch(showToastMessage(data.challengeAccept.message, 'error'))\r\n        }\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const getPaginatedChallenges = (limit = -1, page = 0, searchString = \"\", type = \"public\", status, userId) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const ChallengeQuery = gql`\r\n        query getChallenges($limit:Int, $skip: Int, $searchString: String, $type: String, $status: String, $userId: String) {\r\n            getChallenges(limit: $limit, skip: $skip, searchString: $searchString, type: $type, status: $status, userId: $userId) {\r\n              statusCode\r\n              success\r\n              message\r\n              nextToken\r\n              data {\r\n                totalPages\r\n                skip\r\n                limit\r\n                  data {\r\n                  _id\r\n                  status\r\n                  type\r\n                  consoleId\r\n                  gameId\r\n                  challenger\r\n                  acceptor\r\n                  createdAt\r\n                  gameImage\r\n                  gameName\r\n                  consoleName\r\n                  challengerName\r\n                  acceptorName\r\n                  challengerScore {\r\n                    my\r\n                    opponent\r\n                    status\r\n                    proof\r\n                  }\r\n                  opponentScore {\r\n                    my\r\n                    opponent\r\n                    status\r\n                    proof\r\n                  }\r\n                  mode {\r\n                      name\r\n                      id\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }`\r\n        const { data } = await client.query({\r\n          query: ChallengeQuery,\r\n          variables: {\r\n            limit,\r\n            skip: page * limit,\r\n            searchString,\r\n            type,\r\n            status,\r\n            userId\r\n          }\r\n        })\r\n        handleAuthResponse(data.getChallenges)\r\n        const {success} = data.getChallenges\r\n        if (success) {\r\n            const challenges = getFieldValue(data, 'getChallenges.data.data')\r\n            if (!_.isEmpty(challenges)) {\r\n                dispatch({\r\n                    type: SET_CHALLENGES,\r\n                    payload: challenges\r\n                })\r\n                dispatch({\r\n                    type: SET_TOTAL,\r\n                    payload: getFieldValue(data, 'getChallenges.data.totalPages')\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: SET_CHALLENGES,\r\n                    payload: []\r\n                })\r\n                dispatch({\r\n                    type: SET_TOTAL,\r\n                    payload: 0\r\n                })\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_CHALLENGES,\r\n            payload: []\r\n        })\r\n        dispatch({\r\n            type: SET_TOTAL,\r\n            payload: 0\r\n        })\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const removeChallenges = () => dispatch => {\r\n    dispatch({\r\n        type: SET_CHALLENGES,\r\n        payload: []\r\n    })\r\n}\r\n\r\nexport const updateScore = (_id, scorces) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const updateScoresMutation = gql`\r\n            mutation updateScores($input: ChallengeScoreInput){\r\n                updateScores(input: $input){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data {\r\n                        _id\r\n                        status\r\n                        type\r\n                        consoleId\r\n                        gameId\r\n                        challenger\r\n                        acceptor\r\n                        createdAt\r\n                        gameImage\r\n                        gameName\r\n                        consoleName\r\n                        challengerName\r\n                        acceptorName\r\n                        challengerScore {\r\n                          my\r\n                          opponent\r\n                          status\r\n                          proof\r\n                        }\r\n                        opponentScore {\r\n                          my\r\n                          opponent\r\n                          status\r\n                          proof\r\n                        }\r\n                        mode {\r\n                            name\r\n                            id\r\n                        }\r\n                      }\r\n                }\r\n            }\r\n        `\r\n        const {data} = await client.mutate({\r\n            mutation: updateScoresMutation,\r\n            variables: {\r\n                input: {...scorces, _id}\r\n            }\r\n        })\r\n        handleAuthResponse(data.updateScores)\r\n        const {success} = data.updateScores\r\n        if (success) {\r\n            dispatch({\r\n                type: SET_LOADER,\r\n                payload: false\r\n            })\r\n            if (data.updateScores.data._id) {\r\n                dispatch(showToastMessage(\"Score submitted!\", 'success'))\r\n                dispatch({\r\n                    type: UPDATE_CHALLENGES,\r\n                    payload: data.updateScores.data\r\n                })\r\n            }\r\n            return data.updateScores\r\n        } else {\r\n            dispatch(showToastMessage(data.updateScores.message, 'error'))\r\n        }\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const uploadProof = ({imageData, _id}) => async dispatch => {\r\n    const authtoken = localStorage.getItem('authToken')\r\n    const userId = localStorage.getItem('userId')\r\n    const {getFieldValue} = require('../../../utils')\r\n    const _ = require('underscore')\r\n    const {CONSTANTS} = require('../../../utils/CONSTANTS')\r\n\r\n\r\n    const headers = {\r\n        \"x-auth-token\": authtoken,\r\n        \"x-user-id\": userId\r\n    }\r\n    const formData = new FormData()\r\n    formData.append('document', imageData)\r\n    formData.append('id', _id)\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const result = await request(\r\n            `${CONSTANTS.BACKEND_BASE_URL}/dispute`,\r\n            'post',\r\n            headers,\r\n            formData\r\n        )\r\n        const challengeData = getFieldValue(result, 'data.challenge')\r\n        if (!_.isEmpty(challengeData)) {\r\n            handleAuthResponse(result.data)\r\n            if (!_.isEmpty(challengeData)) {\r\n                dispatch({\r\n                    type: UPDATE_CHALLENGES,\r\n                    payload: challengeData\r\n                })\r\n                showToastMessage(\"Proof Submitted\")\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        return result.data\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        return {success:false, message:[error.message]}\r\n    }\r\n}\r\n\r\nexport const resolveChallengeDispute = ({\r\n    _id,\r\n    challengerStatus,\r\n    opponentStatus,\r\n    status,\r\n    challenger,\r\n    acceptor\r\n}) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const resolveChallengeDisputeMutation = gql`\r\n            mutation resolveChallengeDispute($input: ResolveInput){\r\n                resolveChallengeDispute(input: $input){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data {\r\n                        _id\r\n                        status\r\n                        type\r\n                        consoleId\r\n                        gameId\r\n                        challenger\r\n                        acceptor\r\n                        createdAt\r\n                        gameImage\r\n                        gameName\r\n                        consoleName\r\n                        challengerName\r\n                        acceptorName\r\n                        challengerScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        opponentScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        mode {\r\n                            name\r\n                            id\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n        const {data} = await client.mutate({\r\n            mutation: resolveChallengeDisputeMutation,\r\n            variables: {\r\n                input: {\r\n                    _id,\r\n                    challengerStatus,\r\n                    opponentStatus,\r\n                    status,\r\n                    challenger,\r\n                    acceptor\r\n                }\r\n            }\r\n        })\r\n        handleAuthResponse(data.resolveChallengeDispute)\r\n        const {success} = data.resolveChallengeDispute\r\n        if (success) {\r\n            dispatch({\r\n                type: SET_LOADER,\r\n                payload: false\r\n            })\r\n            if (data.resolveChallengeDispute.data._id) {\r\n                dispatch(showToastMessage(\"Challenge resolved!\", 'success'))\r\n                dispatch({\r\n                    type: UPDATE_CHALLENGES,\r\n                    payload: data.resolveChallengeDispute.data\r\n                })\r\n            }\r\n            return data.resolveChallengeDispute\r\n        } else {\r\n            dispatch(showToastMessage(data.resolveChallengeDispute.message, 'error'))\r\n        }\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\n//Subcriptions\r\n\r\nexport const subsChallenges = (handleChallenges) => dispatch => {\r\n    try {\r\n        const ChallengesSubscription = gql`\r\n        subscription{\r\n            challengesSubs {\r\n                _id\r\n                status\r\n                type\r\n                consoleId\r\n                gameId\r\n                challenger\r\n                acceptor\r\n                createdAt\r\n                gameImage\r\n                gameName\r\n                consoleName\r\n                challengerName\r\n                acceptorName\r\n                challengerScore {\r\n                  my\r\n                  opponent\r\n                  status\r\n                  proof\r\n                }\r\n                opponentScore {\r\n                  my\r\n                  opponent\r\n                  status\r\n                  proof\r\n                }\r\n                mode {\r\n                    name\r\n                    id\r\n                }\r\n              }\r\n          }\r\n        `\r\n        const observable = client.subscribe({query:  ChallengesSubscription})\r\n        return observable.subscribe(({data}) => { \r\n            handleChallenges(data.challengesSubs)\r\n        }) \r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateChallenges = (challenge) => dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: UPDATE_CHALLENGES,\r\n            payload: challenge\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n    }\r\n}","import gql from 'graphql-tag'\r\nimport _ from 'underscore'\r\nimport client from '../../../graphql/client'\r\nimport { getFieldValue, handleAuthResponse } from '../../../utils'\r\nimport {SET_GLOBAL_MESSAGES, SET_LOADER, GET_USER_PROFILE, GET_CHAT_CONTACTS, SELECT_CHAT, SEND_MSG, SET_CURRENT_CHAT_MESSAGES, SET_LAST_MESSAGE, SET_MESSAGE_NOTIFICATION} from '../../types'\r\n\r\nconst MessageFragment = gql`\r\n    fragment MessageData on Message {\r\n        _id\r\n        roomId\r\n        message\r\n        createdAt\r\n        user{\r\n            _id\r\n            userName\r\n            firstName\r\n            lastName\r\n            profileImage\r\n            isImageOns3\r\n            profileBg\r\n        }\r\n    }\r\n`\r\nexport const setGlobalMessages = () => async dispatch => {\r\n    dispatch({\r\n        type: SET_LOADER,\r\n        payload: true\r\n    })\r\n    try {\r\n        const globalMessageQuery = gql`\r\n            query {\r\n                getGlobalMessages{\r\n                    statusCode\r\n                    success\r\n                    nextToken\r\n                    data{\r\n                        ...MessageData\r\n                    }\r\n                }\r\n            }\r\n            ${MessageFragment}\r\n        `\r\n        const {data} = await client.query({\r\n            query: globalMessageQuery\r\n        })\r\n        handleAuthResponse(data.getGlobalMessages)\r\n        const {success} = data.getGlobalMessages\r\n        if (success) {\r\n            const roomData = getFieldValue(data, 'getGlobalMessages.data')\r\n            if (!_.isEmpty(roomData)) {\r\n                dispatch({\r\n                    type: SET_GLOBAL_MESSAGES,\r\n                    payload: roomData\r\n                })\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const removeGlobalMessages = () => dispatch => {\r\n    dispatch({\r\n        type: SET_GLOBAL_MESSAGES,\r\n        payload: []\r\n    })\r\n}\r\n\r\nexport const addMessageToChannel = (roomId, message, type = null) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const addMessageMutation = type ? gql`\r\n            mutation addRoomMessage($input: MessageInput){\r\n                addRoomMessage(input: $input){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data{\r\n                        ...MessageData\r\n                    }\r\n                }\r\n            }\r\n        ${MessageFragment}\r\n        ` : gql`\r\n            mutation addMessage($input: MessageInput){\r\n                addMessage(input: $input){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data{\r\n                        ...MessageData\r\n                    }\r\n                }\r\n            }\r\n        ${MessageFragment}\r\n        `\r\n        const {data} = await client.mutate({\r\n            mutation: addMessageMutation,\r\n            variables: {\r\n                input: {\r\n                    roomId,\r\n                    message\r\n                }\r\n            }\r\n        })\r\n        handleAuthResponse(type ? data.addRoomMessage : data.addMessage)\r\n        if (type === \"private\") {\r\n            dispatch({\r\n                type: SET_LAST_MESSAGE,\r\n                payload: data.addRoomMessage.data\r\n            })\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const getGlobalMessagesSubscriptions = (handleMessageAdded) => async dispatch => {\r\n    try {\r\n        const gloabalMsgSubscription = gql`\r\n           subscription{\r\n            globalMessages{\r\n                    ...MessageData\r\n                }\r\n            }\r\n            ${MessageFragment}\r\n        `\r\n        const observable = client.subscribe({query:  gloabalMsgSubscription})\r\n        return observable.subscribe(({data}) =>  handleMessageAdded(data.globalMessages))\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport const updateGlobalMessage = (messages) => dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_GLOBAL_MESSAGES,\r\n            payload: messages\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        \r\n    }\r\n}\r\n\r\nexport const setCurrentChatMessages = (roomId) => async dispatch => {\r\n    dispatch({\r\n        type: SET_LOADER,\r\n        payload: true\r\n    })\r\n    try {\r\n        const currentChatMessageQuery = gql`\r\n            query getCurrentChatByRoomId($roomId: String){\r\n                getCurrentChatMessages(roomId: $roomId){\r\n                    statusCode\r\n                    success\r\n                    nextToken\r\n                    data{\r\n                        ...MessageData\r\n                    }\r\n                }\r\n            }\r\n            ${MessageFragment}\r\n        `\r\n        const {data} = await client.query({\r\n            query: currentChatMessageQuery,\r\n            variables: {\r\n                roomId\r\n            }\r\n        })\r\n        handleAuthResponse(data.getCurrentChatMessages)\r\n        const {success} = data.getCurrentChatMessages\r\n        if (success) {\r\n            const messages = getFieldValue(data, 'getCurrentChatMessages.data')\r\n            if (messages && messages.length) { \r\n                dispatch({\r\n                    type: SET_CURRENT_CHAT_MESSAGES,\r\n                    payload: messages\r\n                })\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateCurrentChatMessage = (messages) => dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_CURRENT_CHAT_MESSAGES,\r\n            payload: messages\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        \r\n    }\r\n}\r\n\r\nexport const removeCurrentChatMessages = () => dispatch => {\r\n    dispatch({\r\n        type: SET_CURRENT_CHAT_MESSAGES,\r\n        payload: []\r\n    })\r\n}\r\n\r\nexport const updateLastChatMessage = (message) => dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LAST_MESSAGE,\r\n            payload: message\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n    }\r\n}\r\n\r\nexport const setMesageNotifications = (notifications) => dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_MESSAGE_NOTIFICATION,\r\n            payload: notifications\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n    }\r\n}\r\n\r\n\r\n//Chat Subscriptions\r\nexport const subsCurrentSeletedChat = (handleCurrentChat) => dispatch => {\r\n    try {\r\n        const CurrentSeletedSubscription = gql`\r\n           subscription{\r\n            currentChat{\r\n                    ...MessageData\r\n                }\r\n            }\r\n            ${MessageFragment}\r\n        `\r\n        const observable = client.subscribe({query:  CurrentSeletedSubscription})\r\n        return observable.subscribe(({data}) => handleCurrentChat(data.currentChat)) \r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const subsLastMessage = (handleLastMessage) => dispatch => {\r\n    try {\r\n        const LastMessageSubscription = gql`\r\n        subscription{\r\n            lastMessageSubs {\r\n              _id\r\n              roomId\r\n              message\r\n              createdAt\r\n            }\r\n          }\r\n        `\r\n        const observable = client.subscribe({query:  LastMessageSubscription})\r\n        return observable.subscribe(({data}) => handleLastMessage(data.lastMessageSubs)) \r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const subsMessageNotifications = (handleMessageNotification) => dispatch => {\r\n    try {\r\n        const messageNotificationSubscription = gql`\r\n        subscription{\r\n            messageNotificationSubs {\r\n              _id\r\n              userId\r\n              roomId\r\n              messageIds\r\n              tag\r\n              createdAt\r\n              updatedAt\r\n              status\r\n            }\r\n          }\r\n        `\r\n        const observable = client.subscribe({query:  messageNotificationSubscription})\r\n        return observable.subscribe(({data}) => handleMessageNotification(data.messageNotificationSubs)) \r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}","import React from 'react'\r\nimport { Button, Col, Container, Jumbotron, Row } from 'reactstrap'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport default function JombotronHome() {\r\n\r\n    const history = useHistory()\r\n\r\n    const handleClick = () => {\r\n        history.push('/create-challenge')\r\n    }\r\n\r\n    return (\r\n        <Row className=\"mb-2\">\r\n            <Col className=\"jumbotron-container home-page-container\">\r\n                <Jumbotron fluid className=\"jumbotron-div homepage-jumbotron\">\r\n                    <div className=\"jumbotron-overlay position-absolute\"></div>\r\n                    <Container fluid className=\"jumbotron-button position-relative\">\r\n                        <Button.Ripple color='gradient-success' onClick={handleClick}>Play Now</Button.Ripple>\r\n                    </Container>\r\n                </Jumbotron>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { IoLogoGameControllerB } from 'react-icons/io'\r\nimport { Card, CardHeader, CardBody, Media, Button } from 'reactstrap'\r\nimport LoaderComponent from '../../components/Loader'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport Avatar from '@components/avatar'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { acceptChallenge, getPaginatedChallenges, removeChallenges, subsChallenges, updateChallenges } from '../../../redux/actions/challenges'\r\nimport {getFormattedDateTime} from '@src/utils/'\r\nimport { showToastMessage } from '../../../redux/actions/toastNotification'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nimport Swal from 'sweetalert2'\r\nimport { CONSTANTS } from '../../../utils/CONSTANTS'\r\n\r\nlet challengesSubs\r\nexport default function GamesComponent() {\r\n    const dispatch = useDispatch()\r\n\r\n    const {challenges} = useSelector(state => state.challenges)\r\n    const {user} = useSelector(state => state.auth)\r\n\r\n    const handleClick = async (challenge) => {\r\n      if (challenge.challenger !== user._id) {\r\n        const MySwal = withReactContent(Swal)\r\n        const result = await MySwal.fire({\r\n          title: 'Are you sure?',\r\n          text: \"You want to accept this match!\",\r\n          icon: 'warning',\r\n          showCancelButton: true,\r\n          confirmButtonText: 'Yes, I agree',\r\n          customClass: {\r\n            confirmButton: 'btn btn-primary',\r\n            cancelButton: 'btn btn-outline-danger ml-1'\r\n          },\r\n          buttonsStyling: false\r\n        })\r\n        if (result.value) {\r\n          const selectedChallenge = document.getElementById(challenge._id)\r\n          selectedChallenge.remove()\r\n          dispatch(acceptChallenge({_id: challenge._id, status: \"accepted\", opponent: user._id}))\r\n        }\r\n      } else {\r\n        dispatch(showToastMessage(\"You can't accept your own challenge!\", \"error\"))\r\n      }\r\n    }\r\n\r\n    useEffect(() => {\r\n      dispatch(getPaginatedChallenges(-1, -1, \"\", \"public\", CONSTANTS.STATUS.ACTIVE))\r\n      if (challengesSubs?.subscription) {\r\n        challengesSubs.subscription.unsubscribe()\r\n      }\r\n      challengesSubs = dispatch(\r\n        subsChallenges((challenge) => {\r\n          dispatch(updateChallenges(challenge))\r\n        })\r\n      )\r\n      return () => {\r\n        if (challengesSubs?.subscription) {\r\n          challengesSubs.subscription.unsubscribe()\r\n        }\r\n        dispatch(removeChallenges())\r\n      }\r\n    }, [])\r\n    \r\n      const renderGames = () => {\r\n        return challenges?.map(challenge => {\r\n          return (\r\n            <div key={challenge._id} className='employee-task d-flex justify-content-between align-items-center' id={challenge._id}>\r\n              <Media>\r\n                <Avatar imgClassName='rounded' className='mr-75' img={challenge.gameImage} imgHeight='120' imgWidth='120' />\r\n                <Media className='my-auto' body>\r\n                  <h5 className='mb-0'>{challenge.gameName}</h5>\r\n                  <h6 className='mb-0'>By: {challenge.challengerName}</h6>\r\n                  <small>{challenge.consoleName}</small>\r\n                </Media>\r\n              </Media>\r\n              <div className='d-flex align-items-center'>\r\n                <small className='text-muted mr-75'>{getFormattedDateTime(challenge.createdAt)}</small>\r\n                <small className='text-muted mr-75'>\r\n                <Button.Ripple className=\"mr-1\" color=\"primary\" block onClick={() => handleClick(challenge)}>\r\n                  Accept\r\n                </Button.Ripple>\r\n                </small>\r\n              </div>\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n\r\n    return (\r\n        <Card className='chat-widget'>\r\n            <LoaderComponent loading={false} />\r\n            <CardHeader>\r\n                <div className='d-flex align-items-center'>\r\n                    <IoLogoGameControllerB size=\"25\" className='mr-2'/>\r\n                    <h5 className='mb-0'><FormattedMessage id=\"Game Available\" /></h5>\r\n                </div>\r\n            </CardHeader>\r\n            <div className='chat-app-window'>\r\n                <Card className='card-employee-task'>\r\n                    <CardBody>{renderGames()}</CardBody>\r\n                </Card>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport classnames from 'classnames'\r\nimport Avatar from '@components/avatar'\r\nimport { getChatTime } from '../../../utils'\r\nimport _ from 'underscore'\r\n\r\n\r\nexport default function RenderChats({chats}) {\r\n    const userId = localStorage.getItem('userId')\r\n    if (_.isEmpty(chats)) return null \r\n    return chats.map((item, index) => {\r\n        const {user} = item\r\n        const {firstName, lastName} = user\r\n        return (\r\n          <div\r\n            key={index}\r\n            className={classnames('chat', {\r\n              'chat-left': userId !== user._id\r\n            })}\r\n          >\r\n            <div className='chat-avatar'>\r\n              { user.profileImage ? \r\n                <Avatar size='sm' img={user.profileImage}  imgHeight='40' imgWidth='40' />\r\n              :\r\n                <Avatar size='sm' color={user.profileBg}  imgHeight='40' imgWidth='40' content={`${firstName} ${lastName}`} initials />\r\n              }\r\n            </div>\r\n  \r\n            <div className='chat-body'>\r\n                <div key={item.msg} className='chat-content'>\r\n                  <p>{item.message}</p>\r\n                  <p className=\"chat-time\">{getChatTime(item.time, false)}</p>\r\n                </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      })\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport _ from 'underscore'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Card, CardHeader, Form, InputGroup, Input, Button } from 'reactstrap'\r\nimport {BsChatQuoteFill} from \"react-icons/bs\"\r\nimport {FiSend} from \"react-icons/fi\"\r\nimport {setGlobalMessages, removeGlobalMessages, addMessageToChannel, updateGlobalMessage, getGlobalMessagesSubscriptions} from '@src/redux/actions/chats'\r\nimport RenderChats from './RenderChats'\r\n\r\nimport '@styles/base/pages/app-chat-list.scss'\r\nimport LoaderComponent from '../../components/Loader'\r\nlet globalChatSub\r\nconst CardChat = ({loading, setGlobalMessages, removeGlobalMessages, addMessageToChannel, updateGlobalMessage, getGlobalMessagesSubscriptions, globalChat, rooms}) => {\r\n  const [msg, setMsg] = useState('')\r\n  const [chatRef, setChatRef] = useState(null)\r\n  \r\n  useEffect(() => {\r\n    setGlobalMessages()\r\n    globalChatSub = getGlobalMessagesSubscriptions(messages => {\r\n        updateGlobalMessage(messages)\r\n    })\r\n    return () => {\r\n      removeGlobalMessages()\r\n      if (globalChatSub && globalChatSub.subscription) {\r\n        globalChatSub.subscription.unsubscribe()\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  //** Scroll to chat bottom\r\n  const scrollToBottom = () => {\r\n    chatRef.scrollTop = Number.MAX_SAFE_INTEGER\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (chatRef !== null) {\r\n      scrollToBottom()\r\n    }\r\n  }, [chatRef, globalChat])\r\n\r\n  const handleSendMsg = async e => {\r\n    e.preventDefault()\r\n    if (msg.trim().length) {\r\n      const globalRoom = rooms.find(r => r.default && r.type === 'common')\r\n      await addMessageToChannel(globalRoom._id, msg.trim())\r\n      setMsg('') \r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card className='chat-widget'>\r\n      <LoaderComponent loading={loading} />\r\n      <CardHeader>\r\n        <div className='d-flex align-items-center'>\r\n          <BsChatQuoteFill size=\"25\" className='mr-2'/>\r\n          <h5 className='mb-0'>Global Chat</h5>\r\n        </div>\r\n      </CardHeader>\r\n      <div className='chat-app-window'>\r\n        <PerfectScrollbar\r\n          containerRef={el => setChatRef(el)}\r\n          className='user-chats scroll-area'\r\n          options={{ wheelPropagation: false }}\r\n        >\r\n          <div className='chats'>\r\n            <RenderChats chats={globalChat} />\r\n          </div>\r\n        </PerfectScrollbar>\r\n        <Form className='chat-app-form' onSubmit={e => handleSendMsg(e)}>\r\n          <InputGroup className='input-group-merge mr-1 form-send-message'>\r\n            <Input\r\n              value={msg}\r\n              className='border-0'\r\n              onChange={e => setMsg(e.target.value)}\r\n              placeholder='Type your message'\r\n            />\r\n          </InputGroup>\r\n          <Button.Ripple type=\"submit\" className='send btn-icon' color='gradient-primary'>\r\n            <FiSend size={16} />\r\n          </Button.Ripple>\r\n        </Form>\r\n      </div>\r\n    </Card>\r\n  )\r\n}\r\n\r\nCardChat.propTypes = {\r\n  loading: PropTypes.bool.isRequired,\r\n  setGlobalMessages: PropTypes.func.isRequired,\r\n  removeGlobalMessages: PropTypes.func.isRequired,\r\n  addMessageToChannel: PropTypes.func.isRequired,\r\n  getGlobalMessagesSubscriptions: PropTypes.func.isRequired,\r\n  updateGlobalMessage: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loading: state.chats.loading,\r\n    globalChat: state.chats.globalChat,\r\n    rooms: state.rooms.rooms\r\n})\r\n\r\nexport default connect(mapStateToProps, {setGlobalMessages, removeGlobalMessages, addMessageToChannel, updateGlobalMessage, getGlobalMessagesSubscriptions})(CardChat)\r\n","import React from 'react'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport Breadcrumbs from '@components/breadcrumbs'\r\nimport JombotronHome from './components/JombotronHome'\r\nimport GamesComponent from './components/GamesComponent'\r\nimport GlobalChat from './components/GlobalChat'\r\nimport { Col, Row } from 'reactstrap'\r\n\r\n\r\nexport default function index() {\r\n    return (\r\n        <div>\r\n            <Breadcrumbs breadCrumbTitle={<FormattedMessage id=\"Home\" />} breadCrumbActive={<FormattedMessage id=\"Home\" />} />\r\n            <JombotronHome />\r\n            <Row className='match-height'>\r\n                <Col md=\"8\">\r\n                    <GamesComponent />\r\n                </Col>\r\n                <Col md=\"4\">\r\n                    <GlobalChat />\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}