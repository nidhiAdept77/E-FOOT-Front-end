{"version":3,"sources":["views/components/Loader/index.js","@core/components/breadcrumbs/index.js","redux/actions/challenges/index.js","../node_modules/reactstrap/es/Input.js","../node_modules/reactstrap/es/Label.js","views/ResolveDispute/components/resolveDisputeColumns.js","views/ResolveDispute/components/AdminResolveDisputeModal.js","views/ResolveDispute/index.js"],"names":["LoaderComponent","loading","className","color","style","display","margin","size","BreadCrumbs","props","breadCrumbTitle","breadCrumbParent","breadCrumbParent2","breadCrumbParent3","breadCrumbActive","tag","to","active","createUpdateChallenge","type","status","gameId","consoleId","mode","acceptor","dispatch","SET_LOADER","payload","createUpdateChallengeMutation","gql","client","mutate","mutation","variables","input","data","handleAuthResponse","success","_id","showToastMessage","UPDATE_CHALLENGES","message","console","error","acceptChallenge","opponent","acceptChallengeMutation","challengeAccept","getPaginatedChallenges","limit","page","searchString","userId","ChallengeQuery","query","skip","getChallenges","challenges","getFieldValue","_","isEmpty","SET_CHALLENGES","SET_TOTAL","removeChallenges","updateScore","scorces","updateScoresMutation","updateScores","uploadProof","imageData","authtoken","localStorage","getItem","require","CONSTANTS","headers","formData","FormData","append","request","BACKEND_BASE_URL","result","challengeData","resolveChallengeDispute","challengerStatus","opponentStatus","challenger","resolveChallengeDisputeMutation","subsChallenges","handleChallenges","ChallengesSubscription","subscribe","challengesSubs","updateChallenges","challenge","propTypes","children","PropTypes","node","string","oneOfType","number","bsSize","valid","bool","invalid","tagPropType","innerRef","object","func","plaintext","addon","cssModule","Input","_React$Component","_this","call","this","getRef","bind","_assertThisInitialized","focus","_inheritsLoose","_proto","prototype","ref","render","_this$props","attributes","_objectWithoutPropertiesLoose","checkInput","indexOf","isNotaNumber","RegExp","Tag","formControlClass","test","warnOnce","classes","mapToCssModules","classNames","React","createElement","_extends","Component","defaultProps","stringOrNumberProp","columnProps","shape","order","offset","hidden","check","for","xs","sm","md","lg","xl","widths","array","getColumnSizeClass","isXs","colWidth","colSize","Label","htmlFor","colClasses","forEach","i","columnProp","colClass","isObject","_classNames","colSizeInterfix","push","length","ResolveDisputeButton","useDispatch","Button","onClick","e","toggle","setAddEditPopupData","toggleAdminDisputeModal","handleOpen","columns","name","selector","sortable","cell","row","height","width","src","gameImage","gameName","consoleName","challengerName","acceptorName","AdminResolveDisputeModal","useSelector","state","layout","toggleAdminDisputePopup","addEditPopupData","useState","challengeInfo","setChallengeInfo","whoIsWinner","setWhoIsWinner","useEffect","ChallengeInfo","challengerScore","opponentScore","download","imgUrl","text","element","document","file","Blob","href","URL","createObjectURL","click","handleDecideRadio","event","target","value","imgClassName","img","imgHeight","imgWidth","my","proof","CustomInput","id","checked","CHALLENGER","inline","label","onChange","ACCEPTOR","Modal","isOpen","ModalHeader","ModalBody","STATUS","WIN","LOSE","DRAW","FINISHED","ResolveDispute","total","searchValue","setSearchValue","currentPage","setCurrentPage","challengeList","setChallengeList","BOTH","DISPUTE","filter","Card","Loader","Row","Col","currentTarget","setTimeout","noHeader","pagination","paginationServer","paginationPerPage","sortIcon","paginationDefaultPage","paginationComponent","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName"],"mappings":"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","file":"static/js/28.5744615f.chunk.js","sourcesContent":["import React from \"react\"\r\nimport RingLoader from \"react-spinners/RingLoader\"\r\n\r\nconst LoaderComponent = ({loading}) => {\r\n  \r\n  return loading && <div className=\"sweet-loading\">\r\n    <RingLoader color=\"#1061ae\" loading={loading} style={{ \r\n          display: \"block\",\r\n          margin: \"0 auto\"\r\n    }} size={100} />\r\n  </div>\r\n}\r\nexport default LoaderComponent","// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  UncontrolledButtonDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? <h2 className='content-header-title float-left mb-0'>{breadCrumbTitle}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/dashboard'>Dashboard</Link>\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent && <BreadcrumbItem tag='li' className='text-primary'>\r\n                  {breadCrumbParent}\r\n                </BreadcrumbItem>}\r\n                {breadCrumbParent2 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbParent3 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbActive && (\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>) }\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string\r\n}\r\n","import gql from 'graphql-tag'\r\nimport _ from 'underscore'\r\nimport client from '../../../graphql/client'\r\nimport { getFieldValue, handleAuthResponse } from '../../../utils'\r\nimport { SET_LOADER, SET_CHALLENGES, SET_TOTAL, UPDATE_CHALLENGES, REMOVE_CHALLENGES } from '../../types'\r\nimport { showToastMessage } from '../toastNotification'\r\nimport {request} from '../../../utils/apiService'\r\n\r\nexport const createUpdateChallenge = ({type, status, gameId, consoleId, mode, acceptor}) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const createUpdateChallengeMutation = gql`\r\n            mutation createUpdateChallenge($input: ChallengeInput){\r\n                createUpdateChallenge(input: $input){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data {\r\n                        _id\r\n                        status\r\n                        type\r\n                        consoleId\r\n                        gameId\r\n                        challenger\r\n                        acceptor\r\n                        createdAt\r\n                        gameImage\r\n                        gameName\r\n                        consoleName\r\n                        challengerName\r\n                        acceptorName\r\n                        challengerScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        opponentScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        mode {\r\n                            name\r\n                            id\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n        const {data} = await client.mutate({\r\n            mutation: createUpdateChallengeMutation,\r\n            variables: {\r\n                input: {\r\n                    status,\r\n                    gameId,\r\n                    consoleId,\r\n                    type,\r\n                    mode,\r\n                    acceptor\r\n                }\r\n            }\r\n        })\r\n        handleAuthResponse(data.createUpdateChallenge)\r\n        const {success} = data.createUpdateChallenge\r\n        if (success) {\r\n            dispatch({\r\n                type: SET_LOADER,\r\n                payload: false\r\n            })\r\n            if (data.createUpdateChallenge.data._id) {\r\n                dispatch(showToastMessage(\"Challenge created!\", 'success'))\r\n                dispatch({\r\n                    type: UPDATE_CHALLENGES,\r\n                    payload: data.createUpdateChallenge.data\r\n                })\r\n            }\r\n            return data.createUpdateChallenge\r\n        } else {\r\n            dispatch(showToastMessage(data.createUpdateChallenge.message, 'error'))\r\n        }\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const acceptChallenge = ({status, opponent, _id}) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const acceptChallengeMutation = gql`\r\n            mutation challengeAccept($input: ChallengeAcceptInput){\r\n                challengeAccept(input: $input){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data {\r\n                        _id\r\n                        status\r\n                        type\r\n                        consoleId\r\n                        gameId\r\n                        challenger\r\n                        acceptor\r\n                        createdAt\r\n                        gameImage\r\n                        gameName\r\n                        consoleName\r\n                        challengerName\r\n                        acceptorName\r\n                        challengerScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        opponentScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        mode {\r\n                            name\r\n                            id\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n        const {data} = await client.mutate({\r\n            mutation: acceptChallengeMutation,\r\n            variables: {\r\n                input: {\r\n                    status,\r\n                    acceptor: opponent,\r\n                    _id\r\n                }\r\n            }\r\n        })\r\n        handleAuthResponse(data.challengeAccept)\r\n        const {success} = data.challengeAccept\r\n        if (success) {\r\n            dispatch({\r\n                type: SET_LOADER,\r\n                payload: false\r\n            })\r\n            if (data.challengeAccept.data._id) {\r\n                dispatch(showToastMessage(\"Challenge accepted!\", 'success'))\r\n                dispatch({\r\n                    type: UPDATE_CHALLENGES,\r\n                    payload: data.challengeAccept.data\r\n                })\r\n            }\r\n            return data.challengeAccept\r\n        } else {\r\n            dispatch(showToastMessage(data.challengeAccept.message, 'error'))\r\n        }\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const getPaginatedChallenges = (limit = -1, page = 0, searchString = \"\", type = \"public\", status, userId) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const ChallengeQuery = gql`\r\n        query getChallenges($limit:Int, $skip: Int, $searchString: String, $type: String, $status: String, $userId: String) {\r\n            getChallenges(limit: $limit, skip: $skip, searchString: $searchString, type: $type, status: $status, userId: $userId) {\r\n              statusCode\r\n              success\r\n              message\r\n              nextToken\r\n              data {\r\n                totalPages\r\n                skip\r\n                limit\r\n                  data {\r\n                  _id\r\n                  status\r\n                  type\r\n                  consoleId\r\n                  gameId\r\n                  challenger\r\n                  acceptor\r\n                  createdAt\r\n                  gameImage\r\n                  gameName\r\n                  consoleName\r\n                  challengerName\r\n                  acceptorName\r\n                  challengerScore {\r\n                    my\r\n                    opponent\r\n                    status\r\n                    proof\r\n                  }\r\n                  opponentScore {\r\n                    my\r\n                    opponent\r\n                    status\r\n                    proof\r\n                  }\r\n                  mode {\r\n                      name\r\n                      id\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }`\r\n        const { data } = await client.query({\r\n          query: ChallengeQuery,\r\n          variables: {\r\n            limit,\r\n            skip: page * limit,\r\n            searchString,\r\n            type,\r\n            status,\r\n            userId\r\n          }\r\n        })\r\n        handleAuthResponse(data.getChallenges)\r\n        const {success} = data.getChallenges\r\n        if (success) {\r\n            const challenges = getFieldValue(data, 'getChallenges.data.data')\r\n            if (!_.isEmpty(challenges)) {\r\n                dispatch({\r\n                    type: SET_CHALLENGES,\r\n                    payload: challenges\r\n                })\r\n                dispatch({\r\n                    type: SET_TOTAL,\r\n                    payload: getFieldValue(data, 'getChallenges.data.totalPages')\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: SET_CHALLENGES,\r\n                    payload: []\r\n                })\r\n                dispatch({\r\n                    type: SET_TOTAL,\r\n                    payload: 0\r\n                })\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_CHALLENGES,\r\n            payload: []\r\n        })\r\n        dispatch({\r\n            type: SET_TOTAL,\r\n            payload: 0\r\n        })\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const removeChallenges = () => dispatch => {\r\n    dispatch({\r\n        type: SET_CHALLENGES,\r\n        payload: []\r\n    })\r\n}\r\n\r\nexport const updateScore = (_id, scorces) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const updateScoresMutation = gql`\r\n            mutation updateScores($input: ChallengeScoreInput){\r\n                updateScores(input: $input){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data {\r\n                        _id\r\n                        status\r\n                        type\r\n                        consoleId\r\n                        gameId\r\n                        challenger\r\n                        acceptor\r\n                        createdAt\r\n                        gameImage\r\n                        gameName\r\n                        consoleName\r\n                        challengerName\r\n                        acceptorName\r\n                        challengerScore {\r\n                          my\r\n                          opponent\r\n                          status\r\n                          proof\r\n                        }\r\n                        opponentScore {\r\n                          my\r\n                          opponent\r\n                          status\r\n                          proof\r\n                        }\r\n                        mode {\r\n                            name\r\n                            id\r\n                        }\r\n                      }\r\n                }\r\n            }\r\n        `\r\n        const {data} = await client.mutate({\r\n            mutation: updateScoresMutation,\r\n            variables: {\r\n                input: {...scorces, _id}\r\n            }\r\n        })\r\n        handleAuthResponse(data.updateScores)\r\n        const {success} = data.updateScores\r\n        if (success) {\r\n            dispatch({\r\n                type: SET_LOADER,\r\n                payload: false\r\n            })\r\n            if (data.updateScores.data._id) {\r\n                dispatch(showToastMessage(\"Score submitted!\", 'success'))\r\n                dispatch({\r\n                    type: UPDATE_CHALLENGES,\r\n                    payload: data.updateScores.data\r\n                })\r\n            }\r\n            return data.updateScores\r\n        } else {\r\n            dispatch(showToastMessage(data.updateScores.message, 'error'))\r\n        }\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nexport const uploadProof = ({imageData, _id}) => async dispatch => {\r\n    const authtoken = localStorage.getItem('authToken')\r\n    const userId = localStorage.getItem('userId')\r\n    const {getFieldValue} = require('../../../utils')\r\n    const _ = require('underscore')\r\n    const {CONSTANTS} = require('../../../utils/CONSTANTS')\r\n\r\n\r\n    const headers = {\r\n        \"x-auth-token\": authtoken,\r\n        \"x-user-id\": userId\r\n    }\r\n    const formData = new FormData()\r\n    formData.append('document', imageData)\r\n    formData.append('id', _id)\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const result = await request(\r\n            `${CONSTANTS.BACKEND_BASE_URL}/dispute`,\r\n            'post',\r\n            headers,\r\n            formData\r\n        )\r\n        const challengeData = getFieldValue(result, 'data.challenge')\r\n        if (!_.isEmpty(challengeData)) {\r\n            handleAuthResponse(result.data)\r\n            if (!_.isEmpty(challengeData)) {\r\n                dispatch({\r\n                    type: UPDATE_CHALLENGES,\r\n                    payload: challengeData\r\n                })\r\n                showToastMessage(\"Proof Submitted\")\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n        return result.data\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        return {success:false, message:[error.message]}\r\n    }\r\n}\r\n\r\nexport const resolveChallengeDispute = ({\r\n    _id,\r\n    challengerStatus,\r\n    opponentStatus,\r\n    status,\r\n    challenger,\r\n    acceptor\r\n}) => async dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: true\r\n        })\r\n        const resolveChallengeDisputeMutation = gql`\r\n            mutation resolveChallengeDispute($input: ResolveInput){\r\n                resolveChallengeDispute(input: $input){\r\n                    statusCode\r\n                    success\r\n                    message\r\n                    nextToken\r\n                    data {\r\n                        _id\r\n                        status\r\n                        type\r\n                        consoleId\r\n                        gameId\r\n                        challenger\r\n                        acceptor\r\n                        createdAt\r\n                        gameImage\r\n                        gameName\r\n                        consoleName\r\n                        challengerName\r\n                        acceptorName\r\n                        challengerScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        opponentScore {\r\n                            my\r\n                            opponent\r\n                            status\r\n                            proof\r\n                        }\r\n                        mode {\r\n                            name\r\n                            id\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n        const {data} = await client.mutate({\r\n            mutation: resolveChallengeDisputeMutation,\r\n            variables: {\r\n                input: {\r\n                    _id,\r\n                    challengerStatus,\r\n                    opponentStatus,\r\n                    status,\r\n                    challenger,\r\n                    acceptor\r\n                }\r\n            }\r\n        })\r\n        handleAuthResponse(data.resolveChallengeDispute)\r\n        const {success} = data.resolveChallengeDispute\r\n        if (success) {\r\n            dispatch({\r\n                type: SET_LOADER,\r\n                payload: false\r\n            })\r\n            if (data.resolveChallengeDispute.data._id) {\r\n                dispatch(showToastMessage(\"Challenge resolved!\", 'success'))\r\n                dispatch({\r\n                    type: UPDATE_CHALLENGES,\r\n                    payload: data.resolveChallengeDispute.data\r\n                })\r\n            }\r\n            return data.resolveChallengeDispute\r\n        } else {\r\n            dispatch(showToastMessage(data.resolveChallengeDispute.message, 'error'))\r\n        }\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\n//Subcriptions\r\n\r\nexport const subsChallenges = (handleChallenges) => dispatch => {\r\n    try {\r\n        const ChallengesSubscription = gql`\r\n        subscription{\r\n            challengesSubs {\r\n                _id\r\n                status\r\n                type\r\n                consoleId\r\n                gameId\r\n                challenger\r\n                acceptor\r\n                createdAt\r\n                gameImage\r\n                gameName\r\n                consoleName\r\n                challengerName\r\n                acceptorName\r\n                challengerScore {\r\n                  my\r\n                  opponent\r\n                  status\r\n                  proof\r\n                }\r\n                opponentScore {\r\n                  my\r\n                  opponent\r\n                  status\r\n                  proof\r\n                }\r\n                mode {\r\n                    name\r\n                    id\r\n                }\r\n              }\r\n          }\r\n        `\r\n        const observable = client.subscribe({query:  ChallengesSubscription})\r\n        return observable.subscribe(({data}) => { \r\n            handleChallenges(data.challengesSubs)\r\n        }) \r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n        dispatch({\r\n            type: SET_LOADER,\r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateChallenges = (challenge) => dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: UPDATE_CHALLENGES,\r\n            payload: challenge\r\n        })\r\n    } catch (error) {\r\n        console.error('error: ', error)\r\n    }\r\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\n\n/* eslint react/prefer-stateless-function: 0 */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, warnOnce, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  type: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  bsSize: PropTypes.string,\n  valid: PropTypes.bool,\n  invalid: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  plaintext: PropTypes.bool,\n  addon: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  type: 'text'\n};\n\nvar Input = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Input, _React$Component);\n\n  function Input(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.focus = _this.focus.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Input.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.focus = function focus() {\n    if (this.ref) {\n      this.ref.focus();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        type = _this$props.type,\n        bsSize = _this$props.bsSize,\n        valid = _this$props.valid,\n        invalid = _this$props.invalid,\n        tag = _this$props.tag,\n        addon = _this$props.addon,\n        plaintext = _this$props.plaintext,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"type\", \"bsSize\", \"valid\", \"invalid\", \"tag\", \"addon\", \"plaintext\", \"innerRef\"]);\n\n    var checkInput = ['radio', 'checkbox'].indexOf(type) > -1;\n    var isNotaNumber = new RegExp('\\\\D', 'g');\n    var fileInput = type === 'file';\n    var textareaInput = type === 'textarea';\n    var selectInput = type === 'select';\n    var rangeInput = type === 'range';\n    var Tag = tag || (selectInput || textareaInput ? type : 'input');\n    var formControlClass = 'form-control';\n\n    if (plaintext) {\n      formControlClass = formControlClass + \"-plaintext\";\n      Tag = tag || 'input';\n    } else if (fileInput) {\n      formControlClass = formControlClass + \"-file\";\n    } else if (rangeInput) {\n      formControlClass = formControlClass + \"-range\";\n    } else if (checkInput) {\n      if (addon) {\n        formControlClass = null;\n      } else {\n        formControlClass = 'form-check-input';\n      }\n    }\n\n    if (attributes.size && isNotaNumber.test(attributes.size)) {\n      warnOnce('Please use the prop \"bsSize\" instead of the \"size\" to bootstrap\\'s input sizing.');\n      bsSize = attributes.size;\n      delete attributes.size;\n    }\n\n    var classes = mapToCssModules(classNames(className, invalid && 'is-invalid', valid && 'is-valid', bsSize ? \"form-control-\" + bsSize : false, formControlClass), cssModule);\n\n    if (Tag === 'input' || tag && typeof tag === 'function') {\n      attributes.type = type;\n    }\n\n    if (attributes.children && !(plaintext || type === 'select' || typeof Tag !== 'string' || Tag === 'select')) {\n      warnOnce(\"Input with a type of \\\"\" + type + \"\\\" cannot have children. Please use \\\"value\\\"/\\\"defaultValue\\\" instead.\");\n      delete attributes.children;\n    }\n\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes,\n      \"aria-invalid\": invalid\n    }));\n  };\n\n  return Input;\n}(React.Component);\n\nInput.propTypes = propTypes;\nInput.defaultProps = defaultProps;\nexport default Input;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from './utils';\nvar colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar columnProps = PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number, PropTypes.shape({\n  size: stringOrNumberProp,\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nvar propTypes = {\n  children: PropTypes.node,\n  hidden: PropTypes.bool,\n  check: PropTypes.bool,\n  size: PropTypes.string,\n  for: PropTypes.string,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  widths: PropTypes.array\n};\nvar defaultProps = {\n  tag: 'label',\n  widths: colWidths\n};\n\nvar getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : \"col-\" + colWidth;\n  } else if (colSize === 'auto') {\n    return isXs ? 'col-auto' : \"col-\" + colWidth + \"-auto\";\n  }\n\n  return isXs ? \"col-\" + colSize : \"col-\" + colWidth + \"-\" + colSize;\n};\n\nvar Label = function Label(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      hidden = props.hidden,\n      widths = props.widths,\n      Tag = props.tag,\n      check = props.check,\n      size = props.size,\n      htmlFor = props.for,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"hidden\", \"widths\", \"tag\", \"check\", \"size\", \"for\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var columnProp = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    var isXs = !i;\n    var colClass;\n\n    if (isObject(columnProp)) {\n      var _classNames;\n\n      var colSizeInterfix = isXs ? '-' : \"-\" + colWidth + \"-\";\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n      colClasses.push(mapToCssModules(classNames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames[\"order\" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames[\"offset\" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames))), cssModule);\n    } else {\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n      colClasses.push(colClass);\n    }\n  });\n  var classes = mapToCssModules(classNames(className, hidden ? 'sr-only' : false, check ? 'form-check-label' : false, size ? \"col-form-label-\" + size : false, colClasses, colClasses.length ? 'col-form-label' : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    htmlFor: htmlFor\n  }, attributes, {\n    className: classes\n  }));\n};\n\nLabel.propTypes = propTypes;\nLabel.defaultProps = defaultProps;\nexport default Label;","import { useSelector, useDispatch } from \"react-redux\"\r\nimport {\r\n  toggleAdminDisputeModal,\r\n  setAddEditPopupData\r\n} from \"@src/redux/actions/layout\"\r\nimport { Button } from \"reactstrap\"\r\n\r\nconst ResolveDisputeButton = ({data}) => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const handleOpen = (toggle, data) => {\r\n    dispatch(setAddEditPopupData(data))\r\n    dispatch(toggleAdminDisputeModal(toggle))\r\n  }\r\n  \r\n  return (<Button\r\n    className=\"btn-icon m-0\"\r\n    color=\"flat-primary\"\r\n    onClick={(e) => handleOpen(true, data)}\r\n  >\r\n    Resolve\r\n  </Button>)\r\n}\r\n\r\nexport const columns = [\r\n  {\r\n    name: \"Game\",\r\n    selector: \"game\",\r\n    sortable: true,\r\n    cell: (row) => (\r\n      <div className=\"row text-left\">\r\n        <div className=\"col\">\r\n          <img height=\"40\" width=\"40\" src={row.gameImage} />\r\n        </div>\r\n        <div className=\"col\">\r\n          <span>{row.gameName}</span>\r\n        </div>\r\n      </div>\r\n    )\r\n  },\r\n  {\r\n    name: \"Console\",\r\n    selector: \"console\",\r\n    sortable: true,\r\n    cell: (row) => row.consoleName\r\n  },\r\n  {\r\n    name: \"Mode\",\r\n    selector: \"type\",\r\n    sortable: true,\r\n    cell: (row) => (<span className=\"text-capitalize\">{row.type}</span>)\r\n  },\r\n  {\r\n    name: \"Type\",\r\n    selector: \"type\",\r\n    sortable: true,\r\n    cell: (row) => row?.mode?.name\r\n  },\r\n  {\r\n    name: \"Challenger\",\r\n    selector: \"challenger\",\r\n    sortable: true,\r\n    cell: (row) => row?.challengerName\r\n  },\r\n  {\r\n    name: \"Acceptor\",\r\n    selector: \"acceptor\",\r\n    sortable: true,\r\n    cell: (row) => row?.acceptorName\r\n  },\r\n  {\r\n    name: \"Actions\",\r\n    sortable: false,\r\n    cell: (row) => (\r\n      <ResolveDisputeButton data={row} />\r\n    )\r\n  }\r\n]","import React, { useState, useEffect } from \"react\"\r\nimport { Button, Modal, ModalHeader, ModalBody, Card, CardHeader, CardTitle, CardBody, CardText, CustomInput } from \"reactstrap\"\r\nimport {\r\n  toggleAdminDisputeModal,\r\n  setAddEditPopupData\r\n} from \"@src/redux/actions/layout\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport Row from \"reactstrap/lib/Row\"\r\nimport Col from \"reactstrap/lib/Col\"\r\nimport Avatar from '@components/avatar'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { CONSTANTS } from \"../../../utils/CONSTANTS\"\r\nimport { resolveChallengeDispute } from \"../../../redux/actions/challenges\"\r\n\r\nfunction AdminResolveDisputeModal() {\r\n  const { toggleAdminDisputePopup, addEditPopupData } = useSelector(\r\n    (state) => state.layout\r\n  )\r\n\r\n  const [challengeInfo, setChallengeInfo] = useState({})\r\n  const [whoIsWinner, setWhoIsWinner] = useState(\"\")\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    setChallengeInfo(addEditPopupData)\r\n    return () => {\r\n      setChallengeInfo({})\r\n    }\r\n  }, [addEditPopupData])\r\n  \r\n  const handleChallengeButton = () => {\r\n    dispatch(toggleAdminDisputeModal(false))\r\n  }\r\n\r\n  const resolveDispute = () => {\r\n    const data = {\r\n      _id: challengeInfo?._id,\r\n      challengerStatus: \"\",\r\n      opponentStatus: \"\",\r\n      status: challengeInfo?.status,\r\n      challenger: challengeInfo?.challenger,\r\n      acceptor: challengeInfo?.acceptor\r\n    }\r\n    if (whoIsWinner === CONSTANTS.CHALLENGER) {\r\n      data.challengerStatus = CONSTANTS.STATUS.WIN\r\n      data.opponentStatus = CONSTANTS.STATUS.LOSE\r\n    } else if (whoIsWinner === CONSTANTS.ACCEPTOR) {\r\n      data.opponentStatus = CONSTANTS.STATUS.WIN\r\n      data.challengerStatus = CONSTANTS.STATUS.LOSE\r\n    } else if (whoIsWinner === CONSTANTS.STATUS.DRAW) {\r\n      data.challengerStatus = CONSTANTS.STATUS.DRAW\r\n      data.opponentStatus = CONSTANTS.STATUS.DRAW\r\n    }\r\n    data.status = CONSTANTS.STATUS.FINISHED\r\n    dispatch(resolveChallengeDispute(data))\r\n    dispatch(toggleAdminDisputeModal(false))\r\n  }\r\n\r\n  const ChallengeInfo = () => {\r\n\r\n    const {\r\n      gameImage,\r\n      gameName,\r\n      consoleName,\r\n      challengerName,\r\n      acceptorName,\r\n      challengerScore,\r\n      opponentScore,\r\n      mode\r\n    } = challengeInfo\r\n\r\n    const download = (imgUrl, text) => {\r\n      const element = document.createElement(\"a\")\r\n      const file = new Blob([imgUrl], {type: \"image/*\"})\r\n      element.href = URL.createObjectURL(file)\r\n      element.download = `${text}.jpg`\r\n      element.click()\r\n    }\r\n\r\n    const handleDecideRadio = (event) => {\r\n      setWhoIsWinner(event.target.value)\r\n    }\r\n    \r\n    return (<div className=\"mt-2 mb-4\">\r\n      <Row>\r\n      <Col md={2}>\r\n      <Avatar imgClassName='rounded' className='mr-75' img={gameImage} imgHeight='120' imgWidth='120' />\r\n      </Col>\r\n      <Col md={4}>\r\n        <Row>\r\n          <Col><b>Game: </b></Col>\r\n          <Col>{gameName}</Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><b>Console: </b></Col>\r\n          <Col>{consoleName}</Col>\r\n        </Row>\r\n        <hr />\r\n        <Row>\r\n          <Col><b>Challenger: </b></Col>\r\n          <Col>{challengerName}</Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><b>Acceptor: </b></Col>\r\n          <Col>{acceptorName}</Col>\r\n        </Row>\r\n      </Col>\r\n      <Col md={4}>\r\n        <Row>\r\n          <Col><b>Challenger uploaded scores: </b></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><b>Own: </b></Col>\r\n          <Col>{challengerScore?.my ? challengerScore?.my : \"Not uploaded.\"}</Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><b>Acceptor's: </b></Col>\r\n          <Col>{challengerScore?.opponent ? challengerScore?.opponent : \"Not uploaded.\"}</Col>\r\n        </Row>\r\n        <hr />\r\n        <Row>\r\n          <Col><b>Acceptor uploaded scores: </b></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><b>Own: </b></Col>\r\n          <Col>{opponentScore?.my ? opponentScore?.my : \"Not uploaded.\"}</Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><b>Acceptor's: </b></Col>\r\n          <Col>{opponentScore?.opponent ? opponentScore?.opponent : \"Not uploaded.\"}</Col>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n    <hr />\r\n    <Row>\r\n      <Col className=\"mt-1\"><b>Uploaded Proofs: </b></Col>\r\n    </Row>\r\n    <Row className=\"mt-1\">\r\n      <Col md={12}>\r\n        <Row>\r\n          <Col md={6}>\r\n            <Row>\r\n              <Col>\r\n                <b>Challenger's Proof: </b>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                {challengerScore?.proof ? (<Avatar imgClassName='rounded' className='mr-75' img={challengerScore?.proof} imgHeight='240' imgWidth='240' />) : \"No proof uploaded\"}\r\n              </Col>\r\n            </Row>\r\n            {challengerScore?.proof ? (<Row className=\"mt-1\">\r\n              <Col>\r\n                <Button\r\n                  download\r\n                  color=\"primary\"\r\n                  onClick={() => download(challengerScore?.proof, \"Challenger\")}\r\n                >\r\n                  Download\r\n                </Button>\r\n              </Col>\r\n            </Row>) : \"\"}\r\n          </Col>\r\n          <Col md={6}>\r\n          <Row>\r\n              <Col>\r\n                <b>Acceptor's Proof: </b>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>{opponentScore?.proof ? (<Avatar imgClassName='rounded' className='mr-75' img={opponentScore?.proof} imgHeight='240' imgWidth='240' />) : \"No proof uploaded\"}</Col>\r\n            </Row>\r\n            {opponentScore?.proof ? (<Row className=\"mt-1\">\r\n              <Col>\r\n                <Button\r\n                  download\r\n                  color=\"primary\"\r\n                  onClick={() => download(opponentScore?.proof, \"Acceptor\")}\r\n                >\r\n                  Download\r\n                </Button>\r\n              </Col>\r\n            </Row>) : \"\"}\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n    <hr />\r\n    <Row>\r\n      <Col><b>Conclude who's the Winner?</b></Col>\r\n    </Row>\r\n    <Row>\r\n        <Col>\r\n          <div className='demo-inline-spacing'>\r\n            <CustomInput type='radio' id='challenger' checked={whoIsWinner === CONSTANTS.CHALLENGER} value={CONSTANTS.CHALLENGER} name='radioDecide' inline label={`Challenger (${challengerName})`} onChange={handleDecideRadio} />\r\n          </div>\r\n        </Col>\r\n        <Col>\r\n          <div className='demo-inline-spacing'>\r\n            <CustomInput type='radio' id='acceptor' checked={whoIsWinner === CONSTANTS.ACCEPTOR} value={CONSTANTS.ACCEPTOR} name='radioDecide' inline label={`Acceptor (${acceptorName})`} onChange={handleDecideRadio} />\r\n          </div>\r\n        </Col>\r\n        <Col>\r\n          <div className='demo-inline-spacing'>\r\n            <CustomInput type='radio' id='draw' checked={whoIsWinner === \"draw\"} value=\"draw\" name='radioDecide' inline label={`None (Draw)`} onChange={handleDecideRadio} />\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <hr />\r\n    </div>)\r\n  }\r\n\r\n  return (\r\n    <div className=\"vertically-centered-modal\">\r\n      <Modal\r\n        isOpen={toggleAdminDisputePopup}\r\n        toggle={() => dispatch(toggleAdminDisputeModal(false))}\r\n        className=\"modal-dialog-centered modal-lg\"\r\n      >\r\n        <ModalHeader toggle={() => dispatch(toggleAdminDisputeModal(false))}>\r\n          Resolve Dispute\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          {challengeInfo ? <ChallengeInfo /> : <span>No information available, please contact help support if error persists</span>}\r\n          <Row>\r\n            <Col>\r\n              <Button\r\n                color=\"primary\"\r\n                onClick={handleChallengeButton}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col className=\"text-right\">\r\n              <Button\r\n                color=\"primary\"\r\n                onClick={resolveDispute}\r\n              >\r\n                Save Changes\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AdminResolveDisputeModal\r\n","import React, { Fragment, useEffect, useState } from 'react'\r\nimport Breadcrumbs from '@components/breadcrumbs'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport LoaderComponent from '../components/Loader'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Card, Row, Col, Label, Input, TabContent, Nav, NavItem, NavLink } from 'reactstrap'\r\nimport DataTable from 'react-data-table-component'\r\nimport { ChevronDown } from 'react-feather' \r\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\r\nimport { CONSTANTS } from '../../utils/CONSTANTS'\r\nimport ReactPaginate from 'react-paginate'\r\n\r\n// ** Add New Modal Component\r\nimport {columns} from \"./components/resolveDisputeColumns\"\r\nimport AdminResolveDisputeModal from \"./components/AdminResolveDisputeModal\"\r\n\r\nimport { getPaginatedChallenges, removeChallenges } from '../../redux/actions/challenges'\r\n\r\nconst ResolveDispute = props => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {loading, total, challenges} = useSelector(state => state.challenges)\r\n\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [limit, setLimit] = useState(6)\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n    const [challengeList, setChallengeList] = useState([])\r\n\r\n    useEffect(() => {\r\n        dispatch(getPaginatedChallenges(limit, currentPage, searchValue, CONSTANTS.STATUS.BOTH, CONSTANTS.STATUS.DISPUTE))\r\n        return () => {\r\n            dispatch(removeChallenges())\r\n        }\r\n    }, [searchValue])\r\n\r\n    useEffect(() => {\r\n        setChallengeList(challenges.filter(challenge => challenge.status === CONSTANTS.STATUS.DISPUTE))\r\n    }, [challenges])\r\n\r\n    const handleFilter = (value) => {\r\n        setSearchValue(value)\r\n        setTimeout(() => {\r\n            dispatch(getPaginatedChallenges(limit, currentPage, searchValue, CONSTANTS.STATUS.BOTH, CONSTANTS.STATUS.DISPUTE))\r\n        }, 100)\r\n    }\r\n\r\n    const handlePagination = page => {\r\n        dispatch(getPaginatedChallenges(limit, currentPage, searchValue, CONSTANTS.STATUS.BOTH, CONSTANTS.STATUS.DISPUTE))\r\n        setCurrentPage(page.selected + 1)\r\n    }\r\n\r\n    // ** Custom Pagination\r\n    const CustomPagination = () => {\r\n        return (\r\n        <ReactPaginate\r\n            previousLabel={''}\r\n            nextLabel={''}\r\n            pageCount={total || 1}\r\n            activeClassName='active'\r\n            forcePage={currentPage !== 0 ? currentPage - 1 : 0}\r\n            onPageChange={page => handlePagination(page)}\r\n            pageClassName={'page-item'}\r\n            nextLinkClassName={'page-link'}\r\n            nextClassName={'page-item next'}\r\n            previousClassName={'page-item prev'}\r\n            previousLinkClassName={'page-link'}\r\n            pageLinkClassName={'page-link'}\r\n            containerClassName={'pagination react-paginate justify-content-end my-2 pr-1'}\r\n        />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Breadcrumbs breadCrumbTitle={<FormattedMessage id=\"Resolve Dispute\" />} breadCrumbActive={<FormattedMessage id=\"Challenges\" />} />\r\n            <Card>\r\n                <LoaderComponent loading={loading} />\r\n                <Row className='mx-0 p-1'>\r\n                    <Col className='d-flex mt-1' md='6' sm='12'>\r\n                        <Label className='mr-1' for='search-input'>\r\n                        Search\r\n                        </Label>\r\n                        <Input\r\n                        className='dataTable-filter mb-50'\r\n                        type='text'\r\n                        bsSize='sm'\r\n                        id='search-input'\r\n                        value={searchValue}\r\n                        onChange={e => handleFilter(e.currentTarget.value)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <DataTable\r\n                    noHeader\r\n                    pagination\r\n                    paginationServer\r\n                    columns={columns || []}\r\n                    paginationPerPage={limit}\r\n                    className='react-dataTable'\r\n                    sortIcon={<ChevronDown size={10} />}\r\n                    paginationDefaultPage={currentPage + 1}\r\n                    paginationComponent={CustomPagination}\r\n                    data={challengeList}\r\n                />\r\n                <AdminResolveDisputeModal />\r\n            </Card>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default ResolveDispute"],"sourceRoot":""}